/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/ai-digest/api/v1/exchange-rankings-recap": {
    /**
     * Get Exchange Rankings Recap
     * @description Gets daily recap for the exchange rankings page
     */
    get: operations["getExchangeRankingsRecap"];
  };
  "/ai-digest/api/v1/exchange-recap": {
    /**
     * Get Exchange Recap
     * @description Gets news and performance recap for a given exchange
     */
    get: operations["getExchangeRecap"];
  };
  "/ai-digest/api/v1/recap": {
    /**
     * Get Recap
     * @description Gets a recap of the latest news and intel for a given set of assets
     */
    get: operations["getProjectRecap"];
  };
  "/ai/openai/chat/completions": {
    /**
     * OpenAI-Compatible Chat Completion
     * @description Creates a completion for the chat message in OpenAI-compatible format.
     * Supports both streaming and non-streaming responses.
     * The last message must be from the user role.
     * Response is returned directly without the standard {data: } wrapper.
     */
    post: operations["createChatCompletionOpenAI"];
  };
  "/ai/v1/chat/completions": {
    /**
     * Chat Completion
     * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
     * The last message must be from the user role.
     */
    post: operations["createChatCompletion"];
  };
  "/ai/v1/classification/extraction": {
    /**
     * Entity Extraction
     * @description Extracts entities from the provided text content using AI models and database lookups.
     * Supports various entity types and can return similar entities based on the extracted names.
     */
    post: operations["extractEntities"];
  };
  "/diligence/v1/report/asset/{assetId}": {
    /**
     * Get Diligence Report
     * @description Gets a specific diligence report by asset ID. Requires authentication and appropriate enterprise access.
     */
    get: operations["getReportByAssetID"];
  };
  "/diligence/v1/reports/preview": {
    /**
     * Get Diligence Previews
     * @description Gets a preview of the available diligence reports
     */
    get: operations["getPreviews"];
  };
  "/funding/v1/mergers-and-acquisitions": {
    /**
     * Get Acquisition Deals
     * @description Lookup M&A Deals given a set of filters
     */
    get: operations["getAcquisitionDeals"];
  };
  "/funding/v1/organizations": {
    /**
     * Get Organizations
     * @description Lookup Organizations given a set of filters
     */
    get: operations["getOrganizations"];
  };
  "/funding/v1/projects": {
    /**
     * Get Projects
     * @description Lookup Projects given a set of filters
     */
    get: operations["getProjects"];
  };
  "/funding/v1/rounds": {
    /**
     * Get Fundraising Rounds
     * @description Gets a list of all fundraising rounds
     */
    get: operations["getFundingRounds"];
  };
  "/funding/v1/rounds/investors": {
    /**
     * Get Fundraising Rounds Investors
     * @description Gets a list of all investors for a given fundraising round
     */
    get: operations["getFundingRoundsInvestors"];
  };
  "/intel/v1/assets": {
    /**
     * Get all assets
     * @description Returns a list of assets.
     * Supports pagination and filtering by name or symbol.
     */
    get: operations["getAllAssets"];
  };
  "/intel/v1/events": {
    /**
     * Get all events
     * @description Returns a list of events based on the provided filters.
     * Supports pagination and filtering by various parameters.
     */
    post: operations["getAllEvents"];
  };
  "/intel/v1/events/{eventId}": {
    /**
     * Get event and its history
     * @description Returns a specific event by ID along with its history.
     */
    get: operations["getEventAndHistory"];
  };
  "/metrics/v1/exchanges": {
    /**
     * List Exchanges
     * @description Get a list of exchanges with metadata and associated metrics snapshot.
     */
    get: operations["getExchanges"];
  };
  "/metrics/v1/exchanges/{entityIdentifier}/metrics/{datasetSlug}/time-series/{granularity}": {
    /**
     * Get Exchange Timeseries Metrics
     * @description Fetch timeseries metrics for a specific exchange.
     */
    get: operations["getExchangeTimeseries"];
  };
  "/metrics/v1/exchanges/{exchangeIdentifier}": {
    /**
     * Get Exchange Details
     * @description Get detailed information for a specific exchange.
     */
    get: operations["getExchange"];
  };
  "/metrics/v1/exchanges/metrics": {
    /**
     * List Exchange Metrics
     * @description Get metric catalog of datasets for exchanges.
     */
    get: operations["getExchangeMetrics"];
  };
  "/metrics/v1/markets": {
    /**
     * List Markets
     * @description Retrieves a list of markets. Results can be filtered by exchange, quote asset, base asset and 24h volume
     */
    get: operations["getMarkets"];
  };
  "/metrics/v1/markets/{entityIdentifier}/metrics/{datasetSlug}/time-series/{granularity}": {
    /**
     * Get market timeseries data
     * @description Retrieve a specific market's timeseries data
     */
    get: operations["getMarketTimeseries"];
  };
  "/metrics/v1/markets/{marketIdentifier}": {
    /**
     * Get market
     * @description Retrieve a specific market
     */
    get: operations["getMarket"];
  };
  "/metrics/v1/markets/metrics": {
    /**
     * List Exchange Metrics
     * @description Returns a list of timeseries metrics available for exchanges.
     */
    get: operations["getMarketMetrics"];
  };
  "/metrics/v1/networks": {
    /**
     * Get networks
     * @description Retrieve a list of networks
     */
    get: operations["getNetworks"];
  };
  "/metrics/v1/networks/{entityIdentifier}/metrics/{datasetSlug}/time-series/{granularity}": {
    /**
     * Get network timeseries data
     * @description Retrieve a specific network's timeseries data
     */
    get: operations["getNetworkTimeseries"];
  };
  "/metrics/v1/networks/{networkIdentifier}": {
    /**
     * Get network
     * @description Retrieve a specific network
     */
    get: operations["getNetwork"];
  };
  "/metrics/v1/networks/metrics": {
    /**
     * List Exchange Metrics
     * @description Get metric catalog of datasets for networks.
     */
    get: operations["getNetworkMetrics"];
  };
  "/metrics/v2/assets": {
    /**
     * Get assets
     * @description Retrieve a list of assets
     */
    get: operations["getAssetsV2"];
  };
  "/metrics/v2/assets/{entityIdentifier}/metrics/{datasetSlug}/time-series": {
    /**
     * Get asset timeseries data
     * @description Retrieve a specific asset's timeseries data
     */
    get: operations["getAssetTimeseries"];
  };
  "/metrics/v2/assets/{entityIdentifier}/metrics/{datasetSlug}/time-series/{granularity}": {
    /**
     * Get asset timeseries data
     * @description Retrieve a specific asset's timeseries data
     */
    get: operations["getAssetTimeseriesWithGranularity"];
  };
  "/metrics/v2/assets/ath": {
    /**
     * Get asset ATH
     * @description Retrieve a specific asset's ATH
     */
    get: operations["getAssetsV2ATH"];
  };
  "/metrics/v2/assets/details": {
    /**
     * Get asset details
     * @description Retrieve a specific asset's details
     */
    get: operations["getAssetDetails"];
  };
  "/metrics/v2/assets/metrics": {
    /**
     * List Exchange Metrics
     * @description Get metric catalog of datasets for assets.
     */
    get: operations["getAssetsTimeseriesCatalog"];
  };
  "/metrics/v2/assets/roi": {
    /**
     * Get asset ROI
     * @description Retrieve a specific asset's ROI
     */
    get: operations["getAssetsV2ROI"];
  };
  "/news/v1/news/assets": {
    /**
     * Get assets mentioned in news
     * @description Returns a list of assets that are mentioned in news articles.
     * Supports pagination and filtering by asset name or symbol.
     */
    get: operations["getNewsFeedAssets"];
  };
  "/news/v1/news/feed": {
    /**
     * Get news feed
     * @description Returns a list of news articles.
     * Supports pagination and filtering by various parameters.
     */
    get: operations["getNewsFeed"];
  };
  "/news/v1/news/sources": {
    /**
     * Get news sources
     * @description Returns a list of news sources.
     * Supports pagination and filtering by source name.
     */
    get: operations["getNewsSources"];
  };
  "/research/v1/reports": {
    /**
     * Get Research Reports
     * @description Get a paginated list of research reports.
     */
    get: operations["getResearchReports"];
  };
  "/research/v1/reports/{id}": {
    /**
     * Get Research Report by ID
     * @description Get a research report by its ID.
     */
    get: operations["getResearchReportById"];
  };
  "/research/v1/reports/tags": {
    /**
     * Get Research Report Tags
     * @description Get a list of all tags associated with research reports.
     */
    get: operations["getResearchReportTags"];
  };
  "/token-unlocks/v1/allocations": {
    /**
     * Get token unlock allocations
     * @description Returns allocation information given a set of asset IDs
     */
    get: operations["getTokenUnlockAllocations"];
  };
  "/token-unlocks/v1/assets": {
    /**
     * Get token unlock supported assets
     * @description Get all token unlock supported assets
     */
    get: operations["getTokenUnlockSupportedAssets"];
  };
  "/token-unlocks/v1/assets/{assetId}/events": {
    /**
     * Get token unlock events
     * @description Returns unlock events for a given asset ID
     */
    get: operations["getTokenUnlockEvents"];
  };
  "/token-unlocks/v1/assets/{assetId}/unlocks": {
    /**
     * Get token unlock unlocks
     * @description Returns interval-based unlock timeseries data for a given asset and interval
     */
    get: operations["getTokenUnlocks"];
  };
  "/token-unlocks/v1/assets/{assetId}/vesting-schedule": {
    /**
     * Get token unlock vesting schedule
     * @description Returns vesting schedule timeseries data for a given asset
     */
    get: operations["getTokenUnlockVestingSchedule"];
  };
  "/user-management/v1/api/credits/allowance": {
    /**
     * Get a team's current credit allowance
     * @description #### Controller:
     *
     * `github.com/messari/user-service/internal/api/handler/permissioned/credit.(*creditHandler).GetTeamAllowance`
     *
     * ---
     */
    get: operations["getTeamAllowance"];
  };
  "/user-management/v1/api/permissions": {
    /**
     * Get all permissions with active status
     * @description Returns all available permissions with flags indicating which ones are granted to the current user
     */
    get: operations["getPermissions"];
  };
  "/user-management/v1/watchlists": {
    /**
     * List user's watchlists
     * @description Get all watchlists for the authenticated user
     */
    get: operations["listWatchlists"];
    /**
     * Create a new watchlist
     * @description Create a new watchlist for the authenticated user
     */
    post: operations["createWatchlist"];
  };
  "/user-management/v1/watchlists/{id}": {
    /**
     * Get a watchlist
     * @description Get a specific watchlist by ID for the authenticated user
     */
    get: operations["getWatchlist"];
    /**
     * Delete a watchlist
     * @description Delete a specific watchlist by ID for the authenticated user
     */
    delete: operations["deleteWatchlist"];
    /**
     * Update a watchlist
     * @description Update a specific watchlist by ID for the authenticated user
     */
    patch: operations["updateWatchlist"];
  };
  "/user-management/v1/watchlists/{id}/assets": {
    /**
     * Modify watchlist assets
     * @description Modify the assets in a specific watchlist by ID for the authenticated user
     */
    patch: operations["modifyWatchlistAssets"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    AcquisitionDeal: {
      /** @description Entity that is being acquired */
      acquiredEntity?: components["schemas"]["FundingEntity"];
      /** @description Entity that is acquiring */
      acquiringEntity?: components["schemas"]["FundingEntity"];
      /**
       * Format: date-time
       * @description Date when the acquisition deal was announced
       */
      announcementDate?: string;
      /** @description List of announcements related to the acquisition deal */
      announcements?: components["schemas"]["Announcement"][];
      /** @description Unique identifier for the acquisition deal */
      id?: string;
      /** @description Status of the acquisition deal */
      status?: components["schemas"]["AcquisitionDealStatus"];
      /**
       * Format: double
       * @description Transaction amount in USD
       */
      transactionAmountUSD?: number | null;
    };
    /**
     * @description Status of the acquisition deal
     * @enum {string}
     */
    AcquisitionDealStatus: "Announced" | "Completed" | "Canceled";
    AllowanceInfo: {
      /** Format: int64 */
      creditsAllocated: number;
      /** Format: date-time */
      endDate: string;
      id: string;
      isActive: boolean;
      /** Format: int64 */
      remainingCredits: number;
      /** Format: date-time */
      startDate: string;
      /** Format: int64 */
      teamId: number;
    };
    /** @description Announcement details (to be defined) */
    Announcement: Record<string, never>;
    APIError: {
      /**
       * @description Error message when something goes wrong
       * @example Internal server error, please try again
       */
      error: string;
    };
    /** @description Standard response wrapper. */
    APIResponse: {
      /** @description Response payload */
      data: Record<string, never> | string[];
      /** @description Error message if request failed */
      error?: string;
    };
    /**
     * @description Standard response wrapper with additional metadata.
     * This type should be treated as generic in TypeScript: APIResponseWithMetadata<T, M>.
     * T represents the data type, M represents the metadata type.
     */
    APIResponseWithMetadata: {
      /** @description Response payload */
      data: Record<string, never>;
      /** @description Error message if request failed */
      error?: string;
      /** @description Additional metadata about the response */
      metadata?: Record<string, never>;
    };
    Asset: {
      /** @description Unique identifier for the asset */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Slug of the asset */
      slug: string;
      /** @description Symbol of the asset */
      symbol: string;
    };
    AssetComparisonItem: {
      allTimeHigh?: components["schemas"]["V2AssetATH"];
      category: string;
      id: string;
      name: string;
      returnOnInvestment?: components["schemas"]["V2AssetROI"];
      sector: string;
      slug: string;
      symbol: string;
      tags: string[];
    };
    /** @description List of assets */
    AssetList: components["schemas"]["NewsAsset"][];
    AssetReport: components["schemas"]["ReportResponse"] & {
      /**
       * @default asset
       * @enum {string}
       */
      lookupType?: "asset";
    };
    AssetV2Link: {
      name: string;
      url: string;
    };
    AssetV2MarketData: {
      marketcap: components["schemas"]["MarketCap"];
      ohlcv1HourUsd: components["schemas"]["OHLCV"];
      ohlcv24HourUsd: components["schemas"]["OHLCV"];
      /** Format: double */
      priceBtc: number;
      /** Format: double */
      priceEth: number;
      /** Format: double */
      priceUsd: number;
      supply: components["schemas"]["Supply"];
      /** Format: double */
      volume24Hour: number;
    };
    /** @description Attribution information (placeholder - add specific properties as needed) */
    Attribution: Record<string, never>;
    Author: {
      /** @description Unique identifier for the author */
      id: string;
      /** @description Image URL of the author */
      image: string;
      /** @description LinkedIn URL of the author */
      linkedinUrl: string;
      /** @description Name of the author */
      name: string;
    };
    ChartSource: {
      /** @description Unique identifier for the citation */
      citationId?: number;
    } & components["schemas"]["ChartWidgetSpecification"];
    ChartWidgetEntity: {
      /** @description Identifier of the entity */
      entityId: string;
      /** @description Type of the entity */
      entityType: string;
    };
    ChartWidgetSpecification: {
      /** @description Dataset identifier */
      dataset?: string;
      /**
       * Format: date-time
       * @description End time for the chart data
       */
      end?: string;
      /** @description Array of entities for the chart */
      entities?: components["schemas"]["ChartWidgetEntity"][];
      /** @description Data granularity */
      granularity?: string;
      /** @description The ID for the widget */
      id?: number;
      /** @description Metric identifier */
      metric?: string;
      metricTimeseries?: components["schemas"]["TimeseriesResult"];
      /**
       * Format: date-time
       * @description Start time for the chart data
       */
      start?: string;
      /** @description Tier information */
      tier?: string;
    };
    ChatCompletionMessage: {
      /** @description The message content */
      content: string;
      /**
       * @description The role of the message sender
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
    };
    ChatCompletionRequest: {
      /**
       * @description Whether to include inline citations in the response
       * @default false
       */
      inline_citations?: boolean;
      /** @description Array of messages in the conversation */
      messages: components["schemas"]["ChatCompletionMessage"][];
      /**
       * @description Desired format of the response
       * @enum {string}
       */
      response_format?: "markdown" | "plaintext";
      /**
       * @description Whether to stream the response
       * @default false
       */
      stream?: boolean;
      /**
       * @description Controls how verbose the response should be
       * @enum {string}
       */
      verbosity?: "succinct" | "balanced" | "verbose";
    };
    ChatCompletionResponse: {
      /** @description Array of response messages */
      messages: components["schemas"]["ChatCompletionMessage"][];
    };
    ChatCompletionResponseChoiceOpenAI: {
      delta?: {
        /** @description The content of the message */
        content?: string;
      };
      /** @description Reason the completion finished */
      finish_reason: string;
      /** @description Index of the choice in the array */
      index: number;
      message: components["schemas"]["ChatCompletionResponseMessageOpenAI"];
    };
    ChatCompletionResponseMessageOpenAI: {
      /** @description The message content */
      content: string;
      /**
       * @description The role of the message sender
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
    };
    ChatCompletionResponseMetadata: {
      /** @description Current status of the chat completion */
      status: string;
    };
    ChatCompletionResponseMetadataV2: {
      /** @description Array of charts referenced in the response */
      charts?: components["schemas"]["ChartSource"][];
      /** @description Array of sources cited in the response */
      cited_sources?: components["schemas"]["StandardSource"][];
      /** @description Current status of the chat completion */
      status: string;
      /**
       * Format: uuid
       * @description Unique trace ID for the request
       */
      trace_id: string;
    };
    ChatCompletionResponseOpenAI: {
      /** @description Array of completion choices */
      choices: components["schemas"]["ChatCompletionResponseChoiceOpenAI"][];
      /**
       * Format: int64
       * @description Unix timestamp of when the completion was created
       */
      created: number;
      /** @description Unique identifier for the completion */
      id: string;
      metadata?: components["schemas"]["ChatCompletionResponseMetadataV2"];
      /** @description The model used for completion */
      model: string;
      /** @description Object type, always "chat.completion" */
      object: string;
    };
    ContractAddress: {
      contractAddress: string;
      networkName: string;
      networkSlug: string;
    };
    CreateWatchlistRequest: {
      assetIds: string[];
      title: string;
    };
    Document: {
      /** @description Assets mentioned in the document */
      assets?: components["schemas"]["NewsAsset"][];
      /** @description Content of the document */
      content?: string;
      /**
       * Format: uuid
       * @description Unique identifier for the document
       */
      id: string;
      /**
       * Format: int64
       * @description Published timestamp in milliseconds UTC
       */
      publishTimeMillis: number;
      /** @description Source of the document */
      source?: components["schemas"]["Source"];
      /** @description Title of the document */
      title: string;
      /**
       * Format: uri
       * @description URL of the document
       */
      url?: string;
    };
    /** @description List of news documents */
    DocumentList: components["schemas"]["Document"][];
    /** @description Domain information (placeholder - add specific properties as needed) */
    Domain: Record<string, never>;
    Entity: {
      /**
       * Format: float
       * @description Confidence score of the entity match
       */
      confidence?: number;
      /** @description Unique identifier for the entity */
      id?: string;
      /** @description Name of the entity */
      name?: string;
      type?: components["schemas"]["EntityType"];
    };
    /**
     * @description Type of entity being extracted or referenced
     * @enum {string}
     */
    EntityType: "acquired_entity" | "acquiring_entity" | "asset" | "x_user" | "funded_entity" | "investor" | "network" | "person" | "exchange" | "organization" | "project" | "protocol" | "nft_collection";
    Event: {
      /** @description Block number when the event activates */
      activationBlock?: number | null;
      /** @description Category of the event */
      category: string;
      /** @description Date when the event occurred or will occur */
      eventDate?: string | null;
      /** @description Detailed description of the event */
      eventDetails: string;
      /** @description Name of the event */
      eventName: string;
      /** @description Whether the event is global */
      globalEvent: boolean;
      /** @description Unique identifier for the event */
      id: string;
      /** @description Importance level of the event */
      importance: string;
      /** @description Primary assets related to the event */
      primaryAssets: components["schemas"]["Asset"][];
      /** @description Resources related to the event */
      resources?: components["schemas"]["Resource"][];
      /** @description Secondary assets related to the event */
      secondaryAssets?: components["schemas"]["Asset"][];
      /** @description Current status of the event */
      status: string;
      /** @description Subcategory of the event */
      subcategory: string;
      /**
       * Format: date-time
       * @description Date when the event was submitted
       */
      submissionDate: string;
      /** @description Tag associated with the event */
      tag: string;
      /** @description Details about the latest update to the event */
      updateDetails?: string | null;
    };
    EventHistory: {
      /** @description Importance level at this point in history */
      importance: string;
      /** @description Status at this point in history */
      status: string;
      /**
       * Format: date-time
       * @description Date when the history entry was submitted
       */
      submissionDate: string;
      /** @description Details about the update */
      updateDetails?: string | null;
    };
    Exchange: {
      country: string;
      /** Format: int64 */
      globalRank30D: number;
      id: string;
      metrics: components["schemas"]["ExchangeMetrics"];
      name: string;
      region: string;
      relatedExchangeIDs: string[];
      slug: string;
      type: string;
      /** Format: int64 */
      typeRank30D: number;
      /** Format: int64 */
      yearEstablished: number;
    };
    ExchangeEntity: {
      id: string;
      name: string;
      slug: string;
    };
    ExchangeMetrics: {
      /** Format: int64 */
      assetsCount: number;
      /** Format: int64 */
      marketsCount: number;
      /** Format: int64 */
      trades24Hour: number;
      /** Format: double */
      volume24Hour: number;
    };
    /** @description News recap for exchanges */
    ExchangeNewsRecap: {
      id?: string;
      news?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      summaries?: {
          _category?: number;
          references?: {
              id?: string;
              publishDate?: string;
              sourceId?: string;
              sourceName?: string;
              title?: string;
              url?: string;
            }[];
          summary?: string;
        }[];
    };
    /** @description Performance recap for exchanges */
    ExchangePerformanceRecap: {
      data?: {
        exchangeId?: string;
        exchangeName?: string;
        exchangeType?: string;
        last30DaysVolume?: number;
        percentChangeVolume?: number;
        previous30DaysVolume?: number;
        region?: string;
        total30DVolumePercentChangeForAllExchanges?: number;
        total30DVolumePercentChangeForExchangeType?: number;
      };
      id?: string;
      summary?: string;
    };
    /** @description News recap for exchange rankings */
    ExchangeRankingsNewsRecap: {
      id?: string;
      news?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      summaries?: {
          _category?: number;
          references?: {
              id?: string;
              publishDate?: string;
              sourceId?: string;
              sourceName?: string;
              title?: string;
              url?: string;
            }[];
          summary?: string;
        }[];
      summary?: string;
    };
    /** @description Performance recap for exchange rankings */
    ExchangeRankingsPerformanceRecap: {
      data?: {
        /** @description List of top exchanges */
        topExchanges?: {
            id?: string;
            name?: string;
            project_id?: string;
            slug?: string;
            type?: string;
          }[];
        /** @description List of top listed tokens */
        topListedTokens?: {
            assetId?: string;
            listedCount?: number;
            name?: string;
            symbol?: string;
          }[];
        /** @description Volume of top listed tokens */
        topListedTokenVolume?: number;
        /** @description Total spot trading volumes */
        totalSpotVolumes?: number;
      };
      id?: string;
      summary?: string;
    };
    ExchangeRankingsRecap: {
      /**
       * Format: uuid
       * @description Unique identifier for the recap
       */
      id?: string;
      /** @description News recap information */
      newsRecap?: components["schemas"]["ExchangeRankingsNewsRecap"];
      /** @description Performance recap information */
      performanceRecap?: components["schemas"]["ExchangeRankingsPerformanceRecap"];
      /** @description Brief recap points */
      recapBrief?: components["schemas"]["ExchangeRecapPoint"][];
      /**
       * Format: date-time
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Time period of the recap */
      recapPeriod?: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
    };
    ExchangeRecap: {
      /** @description News recap information */
      newsRecap?: components["schemas"]["ExchangeNewsRecap"];
      /** @description Performance recap information */
      performanceRecap?: components["schemas"]["ExchangePerformanceRecap"];
      /** @description Brief recap points */
      recapBrief?: components["schemas"]["ExchangeRecapPoint"][];
      /**
       * Format: date-time
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Time period of the recap */
      recapPeriod?: components["schemas"]["RecapSlug"];
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
    };
    /** @description A single recap point for exchanges */
    ExchangeRecapPoint: {
      date?: string;
      endDate?: string;
      references?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      startDate?: string;
      summary?: string;
      type?: string;
    };
    ExtractRequest: {
      /**
       * @description Whether to return all similar entities or just the best matches
       * @default false
       */
      allSimilarEntities?: boolean;
      /** @description Text content to extract entities from */
      content: string;
      /** @description Types of entities to extract */
      entityTypes?: components["schemas"]["EntityType"][];
    };
    ExtractResponse: {
      /** @description List of extracted entities with their matches */
      extractedEntities: components["schemas"]["GroupedEntity"][];
    };
    ExtractResponseMetadata: {
      /** @description Current status of the extraction request */
      status?: string;
    };
    /** @description Entity that received funding (to be defined) */
    FundingEntity: Record<string, never>;
    FundingRound: {
      /**
       * Format: double
       * @description Amount raised in USD
       */
      amountRaisedUSD?: number | null;
      /**
       * Format: date-time
       * @description Date when the funding round was announced
       */
      announcementDate?: string;
      /** @description List of announcements related to the funding round */
      announcements?: components["schemas"]["Announcement"][];
      /** @description Entity that received the funding */
      fundedEntity?: components["schemas"]["FundingEntity"];
      /** @description Unique identifier for the funding round */
      id?: string;
      /** @description Whether the round was funded with tokens */
      isTokenFunded?: boolean;
      /** @description Stage of the funding round */
      stage?: components["schemas"]["FundingRoundStage"];
      /** @description Type of the funding round */
      type?: components["schemas"]["FundingRoundType"];
    };
    /**
     * @description Stage of the funding round
     * @enum {string}
     */
    FundingRoundStage: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
    /**
     * @description Type of the funding round
     * @enum {string}
     */
    FundingRoundType: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
    GetAllEventsRequest: {
      /** @description Filter by categories */
      category?: string[];
      /**
       * Format: date-time
       * @description Filter events before this time
       */
      endTime?: string;
      /** @description Filter by whether the event is global */
      globalEvent?: boolean | null;
      /** @description Filter by importance levels */
      importance?: string[];
      /**
       * @description Number of items per page
       * @default 20
       */
      limit?: number;
      /**
       * @description Page number for pagination
       * @default 1
       */
      page?: number;
      /** @description Filter by primary assets */
      primaryAssets?: string[];
      /** @description Filter by assets that are either primary or secondary */
      primaryOrSecondaryAssets?: string[];
      /** @description Filter by secondary assets */
      secondaryAssets?: string[];
      /**
       * Format: date-time
       * @description Filter events after this time
       */
      startTime?: string;
      /** @description Filter by status */
      status?: string[];
      /** @description Filter by subcategories */
      subcategory?: string[];
      /** @description Filter by tags */
      tag?: string[];
    };
    GetEventResponse: {
      /** @description The event details */
      event: components["schemas"]["Event"];
      /** @description History of the event */
      eventHistory: components["schemas"]["EventHistory"][];
    };
    GetNetworksV2Response: {
      data: components["schemas"]["NetworkV2"][];
      metadata: components["schemas"]["SnapshotListingMetadata"];
    };
    GetPreviewsResponse: components["schemas"]["ReportResponse"][];
    /** @description List of project recaps */
    GetProjectRecapResponse: components["schemas"]["ProjectRecapResponse"][];
    GroupedEntity: {
      /** @description The name extracted from the content */
      extractedName?: string;
      /** @description The selected/best matching entity if available */
      selectedEntity?: components["schemas"]["SelectedEntity"];
      /** @description List of similar entities found */
      similarEntities?: components["schemas"]["Entity"][];
    };
    /** @description Intel information response */
    IntelResponse: {
      metadata?: {
          eventId?: string;
          eventName?: string;
        }[];
      summary?: string;
    };
    Investors: {
      /** @description ID of the funding round */
      fundingRoundId?: string;
      /** @description List of organizations that invested */
      organizations?: components["schemas"]["Organization"][];
      /** @description List of persons that invested */
      persons?: components["schemas"]["Person"][];
      /** @description List of projects that invested */
      projects?: components["schemas"]["Project"][];
    };
    Market: {
      baseAsset: components["schemas"]["V2AssetEntity"];
      baseAssetSector: string;
      exchange: components["schemas"]["ExchangeEntity"];
      /** Format: date-time */
      firstTradeAt: string;
      id: string;
      isNewMarket: boolean;
      isRecentlyListed: boolean;
      /** Format: date-time */
      lastTradeAt: string;
      liveness: string;
      metrics: components["schemas"]["MarketMetrics"];
      network?: components["schemas"]["NetworkEntity"];
      quoteAsset: components["schemas"]["V2AssetEntity"];
      quoteAssetSector: string;
      sectors: string[];
    };
    MarketCap: {
      /** Format: double */
      circulatingUsd: number;
      /** Format: double */
      dominance: number;
      /** Format: double */
      fullyDilutedUsd: number;
    };
    MarketMetrics: {
      /** Format: double */
      exchangeVolumePercentage24h: number;
      /** Format: double */
      latestPrice24hClose: number;
      /** Format: double */
      latestPrice24hHigh: number;
      /** Format: double */
      latestPrice24hLow: number;
      /** Format: double */
      latestPrice24hOpen: number;
      /** Format: double */
      premiumDiscount: number;
      /** Format: int64 */
      tradeCount24h: number;
      /** Format: double */
      volume24h: number;
    };
    ModifyWatchlistAssetsRequest: {
      /** @enum {string} */
      action: "add" | "remove";
      assetIds: string[];
    };
    Network: {
      id: string;
      metrics: components["schemas"]["NetworkMetrics2"];
      name: string;
      slug: string;
    };
    NetworkAddresses: {
      /** Format: int64 */
      activeAddresses: number;
      /** Format: int64 */
      newAddresses: number;
      /** Format: int64 */
      returningAddresses: number;
    };
    NetworkBlockProduction: {
      /** Format: double */
      circulatingMarketcap: number;
      /** Format: double */
      estimatedNakamotoCoefficient: number;
    };
    NetworkBlocks: {
      /** Format: int64 */
      maxBlockNumber: number;
      /** Format: int64 */
      minBlockNumber: number;
      /** Format: int64 */
      totalBlocks: number;
    };
    NetworkContracts: {
      /** Format: int64 */
      activeContracts: number;
      /** Format: int64 */
      contractCallGasPayers: number;
      /** Format: int64 */
      contractDeployers: number;
      /** Format: int64 */
      gasSpenders: number;
      /** Format: int64 */
      newContractDeployers: number;
      /** Format: int64 */
      newContractsCalled: number;
      /** Format: int64 */
      newContractsDeployed: number;
      /** Format: int64 */
      returningContractsCalled: number;
      /** Format: int64 */
      totalContractsCalled: number;
      /** Format: int64 */
      uniqueContractCallers: number;
    };
    NetworkCore: {
      /** Format: int64 */
      activeAddresses: number;
      /** Format: int64 */
      blockTimeMs: number;
      /** Format: int64 */
      contractDeployers: number;
      /** Format: int64 */
      newContractsDeployed: number;
      /** Format: int64 */
      totalTransactions: number;
    };
    NetworkEntity: {
      id: string;
      name: string;
      slug: string;
    };
    NetworkFees: {
      /** Format: double */
      avgFeePerTransaction: number;
      /** Format: double */
      feeMedian: number;
      /** Format: double */
      feeRevenue: number;
      /** Format: double */
      rolling90DAvgTransactionFee: number;
    };
    NetworkFinancial: {
      /** Format: double */
      avgFeePerTransactionUSD: number;
      /** Format: double */
      expensesUSD: number;
      /** Format: double */
      feeMedianUSD: number;
      /** Format: double */
      feesSupplySideUSD: number;
      /** Format: double */
      feesTotalUSD: number;
      /** Format: double */
      revenueUSD: number;
      /** Format: double */
      rolling7dAvgTransactionFeeUSD: number;
      /** Format: double */
      tokenIncentivesUSD: number;
    };
    /** @description Network metrics data */
    NetworkMetrics: {
      active_addresses?: number;
      active_addresses_percent_change?: number;
      dex_volume?: number;
      dex_volume_percent_change?: number;
      fee_revenue?: number;
      fee_revenue_percent_change?: number;
      tvl_percent_change?: number;
      tvl_usd?: number;
    };
    NetworkMetrics2: {
      addresses: components["schemas"]["NetworkAddresses"];
      blockProduction: components["schemas"]["NetworkBlockProduction"];
      blocks: components["schemas"]["NetworkBlocks"];
      contracts: components["schemas"]["NetworkContracts"];
      fees: components["schemas"]["NetworkFees"];
      options: components["schemas"]["Options"];
      transactions: components["schemas"]["NetworkTransactions"];
    };
    NetworkMetricsV2: {
      core: components["schemas"]["NetworkCore"];
      financial: components["schemas"]["NetworkFinancial"];
      stablecoin: components["schemas"]["NetworkStablecoin"];
    };
    NetworkStablecoin: {
      /** Format: double */
      stablecoinMintsUSD: number;
      /** Format: double */
      stablecoinOutstandingSupplyUSD: number;
      /** Format: double */
      stablecoinRedemptionsUSD: number;
      /** Format: double */
      stablecoinTransferVolumeUSD: number;
    };
    NetworkTransactions: {
      /** Format: int64 */
      successfulTransactions: number;
      /** Format: int64 */
      totalTransactions: number;
      /** Format: int64 */
      unsuccessfulTransactions: number;
    };
    NetworkV2: {
      id: string;
      metrics: components["schemas"]["NetworkMetricsV2"];
      name: string;
      slug: string;
    };
    NewsAsset: {
      /**
       * Format: uuid
       * @description Unique identifier for the asset
       */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Symbol of the asset */
      symbol?: string;
    };
    /** @description News information response */
    NewsResponse: {
      metadata?: {
          documentId?: string;
          documentName?: string;
          documentUrl?: string;
          sourceId?: string;
          sourceName?: string;
          sourceType?: string;
        }[];
      summary?: string;
    };
    OHLCV: {
      /** Format: double */
      close: number;
      /** Format: double */
      high: number;
      /** Format: double */
      low: number;
      /** Format: double */
      open: number;
      /** Format: double */
      volume: number;
    };
    Options: {
      /** Format: double */
      volume: number;
    };
    Organization: {
      /** @description Category of the organization */
      category?: string;
      /**
       * Format: date-time
       * @description When the organization was founded
       */
      foundedAt?: string;
      /** @description Unique identifier for the organization */
      id?: string;
      /** @description Location of the organization */
      location?: string;
      /** @description Name of the organization */
      name?: string;
      /** @description Sector of the organization */
      sector?: string;
      /** @description Tags associated with the organization */
      tags?: string[];
    };
    /** @description Pagination metadata for list endpoints */
    PaginationResult: {
      /**
       * @description Number of items per page
       * @example 20
       */
      limit?: number;
      /**
       * @description Current page number
       * @example 1
       */
      page?: number;
      /**
       * @description Total number of pages
       * @example 7
       */
      totalPages?: number;
      /**
       * @description Total number of items available
       * @example 100
       */
      totalRows?: number;
    };
    Permission: {
      active: boolean;
      name: string;
      /** @enum {string} */
      permissionSlug: "aggregation_permission" | "ai_digest_permission" | "ai_toolkit_permission" | "asset_permission" | "copilot_permission" | "core_metrics_permission" | "diligence_service_permission" | "funding_permission" | "governor_service_permission" | "intel_permission" | "market_data_permission" | "news_permission" | "research_permission" | "signal_permission" | "token_unlocks_permission";
    };
    PermissionsResponse: {
      /** Format: date-time */
      expiresAt?: string;
      hasAllAccess: boolean;
      hasFullMarketDataGranularity: boolean;
      permissions: components["schemas"]["Permission"][];
    };
    /** @description Person details (to be defined) */
    Person: Record<string, never>;
    PointSchema: {
      attribution?: components["schemas"]["Attribution"][];
      description?: string;
      format?: string;
      /** @description Aggregate operation performed for the group */
      group_aggregate_operation?: string;
      /** @description Deprecated - Use slug instead */
      id?: string;
      is_timestamp?: boolean;
      name?: string;
      slug?: string;
      subcategory?: string;
      /** @description Aggregate operation performed for the time bucket */
      time_bucket_aggregate_operation?: string;
    };
    Project: {
      /** @description Category of the project */
      category?: string;
      /**
       * Format: date-time
       * @description When the project was founded
       */
      foundedAt?: string;
      /** @description Unique identifier for the project */
      id?: string;
      /** @description Name of the project */
      name?: string;
      /** @description ID of the primary asset associated with the project */
      primaryAssetId?: string | null;
      /** @description Sector of the project */
      sector?: string;
      /** @description Tags associated with the project */
      tags?: string[];
    };
    ProjectRecapResponse: {
      /** @description Unique identifier for the asset */
      asset_id?: string;
      /** @description Intel information */
      intel?: components["schemas"]["IntelResponse"];
      /** @description Count of intel items */
      intelCount?: number;
      /** @description Network metrics data */
      networkMetricsData?: components["schemas"]["NetworkMetrics"];
      /** @description News information */
      news?: components["schemas"]["NewsResponse"];
      /** @description Count of news items */
      newsCount?: number;
      /** @description Count of proposition items */
      propositionCount?: number;
      /** @description Propositions information */
      propositions?: components["schemas"]["PropositionResponse"];
      /**
       * Format: date
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Research information */
      research?: components["schemas"]["ResearchResponse"];
      /** @description Count of research items */
      researchCount?: number;
      /** @description Summary information */
      summary?: components["schemas"]["SummaryResponse"];
      /** @description Time period of the recap */
      timePeriod?: components["schemas"]["RecapSlug"];
      /** @description Token unlock information */
      unlocks?: components["schemas"]["TokenUnlockData"];
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
      /** @description Video and podcast ranking information */
      videoPodcastRanking?: components["schemas"]["VideoPodcastResponse"];
    };
    /** @description Proposition information response */
    PropositionResponse: {
      metadata?: {
          propositionId?: string;
          title?: string;
        }[];
      summary?: string;
    };
    /**
     * @description Time period for the recap
     * @enum {string}
     */
    RecapSlug: "daily" | "weekly" | "monthly";
    /** @description A diligence report response */
    ReportResponse: {
      /**
       * Format: uuid
       * @description Unique identifier for the asset
       */
      assetId?: string;
      /** @description Slug identifier for the asset */
      assetSlug?: string;
      /**
       * Format: uuid
       * @description Unique identifier for the report
       */
      id?: string;
      /**
       * Format: date-time
       * @description Timestamp of last revision
       */
      lastRevisedAt?: string;
      /** @description Name of the project */
      projectName?: string;
      /** @description Publication status of the report */
      publishStatus?: string;
      /** @description Map of report sections */
      sections?: {
        [key: string]: components["schemas"]["ReportSection"];
      };
      /** @description Sector classification */
      sector?: string;
      /** @description Slug identifier for the report */
      slug?: string;
      /** @description Asset symbol */
      symbol?: string | null;
    };
    /** @description A section within a diligence report */
    ReportSection: {
      /** @description Markdown content of the section */
      markdown?: string;
      /** @description Timestamp of last revision */
      updatedAt?: string;
    };
    ResearchReport: {
      /** @description Array of asset IDs associated with the research report */
      assetIds: string[];
      /** @description Array of authors associated with the research report */
      authors: components["schemas"]["Author"][];
      /** @description Content of the research report (either HTML or Markdown) */
      content: string;
      /**
       * Format: date-time
       * @description Date and time the research report was created
       */
      createdAt: string;
      /** @description Hook of the research report */
      hook: string;
      /**
       * Format: uuid
       * @description Unique identifier for the research report
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time the research report was published
       */
      publishDate: string;
      /**
       * Format: float
       * @description Estimated reading time in minutes
       */
      readingTimeInMinutes: number;
      /** @description Slug of the research report */
      slug: string;
      /** @description Subscription tier required to access the report */
      subscriptionTier: string;
      /** @description Summary of the research report */
      summary: string;
      /** @description Tags associated with the research report */
      tags: components["schemas"]["Tag"][];
      /** @description Title of the research report */
      title: string;
      /**
       * Format: date-time
       * @description Date and time the research report was updated
       */
      updatedAt: string;
    };
    /** @description Research information response */
    ResearchResponse: {
      metadata?: {
          slug?: string;
          title?: string;
        }[];
      summary?: string;
    };
    Resource: {
      /** @description Title of the resource */
      title?: string;
      /**
       * Format: uri
       * @description URL of the resource
       */
      url?: string;
    };
    SelectedEntity: {
      confidenceScore?: string;
      /** @description Details of the entity */
      details?: {
          id?: string;
          type?: string;
        }[];
      /** @description Name of the entity */
      name?: string;
      relevanceScore?: string;
    };
    Series: {
      entity?: {
        [key: string]: unknown;
      };
      key: string;
      points: Record<string, never>[][];
    };
    SnapshotListingMetadata: {
      /** Format: int64 */
      page: number;
      /** Format: int64 */
      pageSize: number;
      /** Format: int64 */
      totalPages: number;
      /** Format: int64 */
      totalRows: number;
    };
    Source: {
      /**
       * Format: uuid
       * @description Unique identifier for the source
       */
      id: string;
      /** @description Name of the source */
      sourceName: string;
      /** @description Type of the source */
      sourceType: components["schemas"]["SourceType"];
    };
    /** @description List of news sources */
    SourceList: components["schemas"]["Source"][];
    /**
     * @description Type of news source
     * @enum {string}
     */
    SourceType: "News" | "Forum" | "Blog";
    StandardSource: {
      /** @description Unique identifier for the citation */
      citationId?: number;
      domain?: components["schemas"]["Domain"];
      /** @description Title of the source */
      title?: string;
      /** @description URL of the source */
      url?: string;
    };
    /** @description Summary information */
    SummaryResponse: {
      summary?: string;
    };
    Supply: {
      /** Format: double */
      circulating: number;
      /** Format: double */
      max: number;
      /** Format: double */
      total: number;
    };
    Tag: {
      /** @description Unique identifier for the tag */
      id: string;
      /** @description Name of the tag */
      name: string;
    };
    TimeseriesCatalog: {
      datasets: components["schemas"]["TimeseriesDataset"][];
    };
    TimeseriesData: {
      points: number[][];
    };
    TimeseriesDataset: {
      granularities: ("" | "1m" | "5m" | "15m" | "30m" | "1h" | "6h" | "1d" | "1w" | "30d" | "1q" | "1y")[];
      metrics: components["schemas"]["TimeseriesPointSchema"][];
      slug: string;
    };
    TimeseriesMetadata: {
      /** @enum {string} */
      granularity: "" | "1m" | "5m" | "15m" | "30m" | "1h" | "6h" | "1d" | "1w" | "30d" | "1q" | "1y";
      pointSchemas: components["schemas"]["TimeseriesPointSchema"][];
    };
    TimeseriesPointSchema: {
      description: string;
      is_timestamp: boolean;
      name: string;
      slug: string;
    };
    TimeseriesResult: {
      point_schema: components["schemas"]["PointSchema"][];
      series: components["schemas"]["Series"][];
    };
    TokenUnlockAllocation: {
      allocationRecipientCount?: number;
      allocations?: {
          allocationRecipient?: string;
          assumptions?: string;
          cumulativeUnlockedNative?: number;
          cumulativeUnlockedUSD?: number;
          description?: string;
          percentOfUnlocksCompleted?: number;
          sources?: {
              source?: string;
              sourceType?: string;
            }[];
          totalAllocationNative?: number;
          totalAllocationUSD?: number;
          unlocksRemainingNative?: number;
          unlocksRemainingUSD?: number;
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      cumulativeUnlockedNative?: number;
      cumulativeUnlockedUSD?: number;
      genesisDate?: string;
      lastUpdatedAt?: string;
      percentOfUnlocksCompleted?: number;
      projectedEndDate?: string;
      totalAllocationNative?: number;
      totalAllocationUSD?: number;
      unlocksRemainingNative?: number;
      unlocksRemainingUSD?: number;
    };
    /** @description Token unlock information */
    TokenUnlockData: {
      nextCliffUnlockData?: {
        nextAmountPercentOfCirculatingSupply?: number;
        nextUnlockAmount?: number;
        nextUnlockAmountUSD?: number;
        timestamp?: string;
      };
      tokenUnlockDetails?: {
        circulatingSupplyIncreaseFuturePct?: number;
        circulatingSupplyIncreasePastPct?: number;
        futureAmountUnlocked?: number;
        futureAmountUnlockedUSD?: number;
        pastAmountUnlocked?: number;
        pastAmountUnlockedUSD?: number;
        pctUnlocksCompleted?: number;
        totalUnlocked?: number;
      };
    };
    TokenUnlockEvent: {
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      unlockEvents?: {
          cliff?: {
            allocations?: {
                allocationRecipient?: string;
                amountNative?: number;
                amountUSD?: number;
                percentOfTotalAllocation?: number;
              }[];
            amountNative?: number;
            amountUSD?: number;
            percentOfTotalAllocation?: number;
          };
          dailyLinearRateChange?: {
            allocations?: {
                allocationRecipient?: string;
                dailyAmountNative?: number;
                dailyAmountUSD?: number;
                nextDailyAmountNative?: number;
                nextDailyAmountUSD?: number;
                nextPercentOfTotalAllocation?: number;
                percentChangeOfRate?: number;
                percentOfTotalAllocation?: number;
              }[];
            dailyAmountNative?: number;
            dailyAmountUSD?: number;
            nextDailyAmountNative?: number;
            nextDailyAmountUSD?: number;
            nextPercentOfTotalAllocation?: number;
            percentChangeOfRate?: number;
            percentOfTotalAllocation?: number;
          };
          timestamp?: string;
        }[];
    };
    TokenUnlockSupportedAsset: {
      category?: string;
      genesisDate?: string;
      id?: string;
      name?: string;
      otherInfo?: string;
      projectedEndDate?: string;
      sector?: string;
      serialId?: number;
      slug?: string;
      symbol?: string;
      tags?: string[];
    };
    TokenUnlockUnlocks: {
      allocations?: {
          allocationRecipient?: string;
          dailySnapshots?: {
              timestamp?: string;
              unlockedInPeriodNative?: number;
              unlockedInPeriodUSD?: number;
            }[];
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      endDate?: string;
      genesisDate?: string;
      /** @enum {string} */
      interval?: "DAILY";
      projectedEndDate?: string;
      startDate?: string;
      totalSnapshots?: {
          timestamp?: string;
          unlockedInPeriodNative?: number;
          unlockedInPeriodUSD?: number;
        }[];
    };
    TokenUnlockVestingSchedule: {
      allocations?: {
          allocationRecipient?: string;
          dailySnapshots?: {
              cumulativeUnlockedNative?: number;
              cumulativeUnlockedUSD?: number;
              percentOfUnlocksCompleted?: number;
              timestamp?: string;
              unlocksRemainingNative?: number;
              unlocksRemainingUSD?: number;
            }[];
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      endTime?: string;
      genesisDate?: string;
      projectedEndDate?: string;
      startTime?: string;
      totalDailySnapshots?: {
          cumulativeUnlockedNative?: number;
          cumulativeUnlockedUSD?: number;
          percentOfUnlocksCompleted?: number;
          timestamp?: string;
          unlocksRemainingNative?: number;
          unlocksRemainingUSD?: number;
        }[];
    };
    UpdateWatchlistRequest: {
      assetIds?: string[];
      title?: string;
    };
    V2Asset: {
      allTimeHigh: components["schemas"]["V2AssetATH"];
      category: string;
      contractAddresses: components["schemas"]["ContractAddress"][];
      description: string;
      id: string;
      links: components["schemas"]["AssetV2Link"][];
      marketData: components["schemas"]["AssetV2MarketData"];
      name: string;
      networkSlugs: string[];
      protocolSlugs: string[];
      /** Format: int64 */
      rank?: number;
      returnOnInvestment: components["schemas"]["V2AssetROI"];
      sector: string;
      slug: string;
      symbol: string;
      tags: string[];
    };
    V2AssetATH: {
      /** Format: double */
      allTimeHigh: number;
      /** Format: date-time */
      allTimeHighDate: string;
      /** Format: double */
      allTimeHighPercentDown: number;
      /** Format: double */
      allTimeHighTimeSinceSeconds: number;
      /** Format: double */
      breakevenMultiple: number;
      /** Format: double */
      cycleLow: number;
      /** Format: date-time */
      cycleLowDate: string;
      /** Format: double */
      cycleLowPercentUp: number;
      /** Format: double */
      cycleLowTimeSinceSeconds: number;
    };
    V2AssetEntity: {
      id: string;
      name: string;
      slug: string;
      symbol: string;
    };
    V2AssetListItem: {
      category: string;
      hasDiligence: boolean;
      hasFundraising: boolean;
      hasIntel: boolean;
      hasMarketData: boolean;
      hasNews: boolean;
      hasProposals: boolean;
      hasResearch: boolean;
      hasTokenUnlocks: boolean;
      id: string;
      name: string;
      /** Format: double */
      rank: number;
      sector: string;
      slug: string;
      symbol: string;
      tags: string[];
    };
    V2AssetROI: {
      /** Format: double */
      priceChange1y: number;
      /** Format: double */
      priceChange3y: number;
      /** Format: double */
      priceChange5y: number;
      /** Format: double */
      priceChange7d: number;
      /** Format: double */
      priceChange24h: number;
      /** Format: double */
      priceChange30d: number;
      /** Format: double */
      priceChangeMTD: number;
      /** Format: double */
      priceChangeQTD: number;
      /** Format: double */
      priceChangeYTD: number;
    };
    /** @description Video and podcast ranking information */
    VideoPodcastResponse: {
      summary?: {
          id?: string;
          sourceID?: string;
          sourceName?: string;
          summary?: string;
          title?: string;
          url?: string;
        }[];
    };
    Watchlist: {
      assetIds: string[];
      /** Format: date-time */
      createdAt: string;
      id: string;
      title: string;
      /** Format: date-time */
      updatedAt: string;
    };
  };
  responses: {
    /** @description Standard error response */
    ErrorResponse: {
      content: never;
    };
  };
  parameters: {
    /** @description API key for authentication */
    apiKey: string;
    /** @description Number of items per page */
    limit?: number;
    /** @description Page number for pagination (1-based) */
    page?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Get Exchange Rankings Recap
   * @description Gets daily recap for the exchange rankings page
   */
  getExchangeRankingsRecap: {
    parameters: {
      query?: {
        /** @description Optional time period for the recap */
        period?: components["schemas"]["RecapSlug"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExchangeRankingsRecap"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Exchange Recap
   * @description Gets news and performance recap for a given exchange
   */
  getExchangeRecap: {
    parameters: {
      query: {
        /** @description Exchange identifier */
        exchange_id: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExchangeRecap"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Exchange not found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Recap
   * @description Gets a recap of the latest news and intel for a given set of assets
   */
  getProjectRecap: {
    parameters: {
      query: {
        /** @description Project identifier */
        project_id: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["GetProjectRecapResponse"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Project not found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * OpenAI-Compatible Chat Completion
   * @description Creates a completion for the chat message in OpenAI-compatible format.
   * Supports both streaming and non-streaming responses.
   * The last message must be from the user role.
   * Response is returned directly without the standard {data: } wrapper.
   */
  createChatCompletionOpenAI: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ChatCompletionResponseOpenAI"];
          "text/event-stream": string;
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Chat Completion
   * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
   * The last message must be from the user role.
   */
  createChatCompletion: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ChatCompletionResponse"];
            metadata?: components["schemas"]["ChatCompletionResponseMetadata"];
          };
          "text/event-stream": string;
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Entity Extraction
   * @description Extracts entities from the provided text content using AI models and database lookups.
   * Supports various entity types and can return similar entities based on the extracted names.
   */
  extractEntities: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtractRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExtractResponse"];
            metadata?: components["schemas"]["ExtractResponseMetadata"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Diligence Report
   * @description Gets a specific diligence report by asset ID. Requires authentication and appropriate enterprise access.
   */
  getReportByAssetID: {
    parameters: {
      path: {
        /** @description UUID of the asset to get the report for */
        assetId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved diligence report */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReport"];
        };
      };
      400: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Get Diligence Previews
   * @description Gets a preview of the available diligence reports
   */
  getPreviews: {
    parameters: {
      query?: {
        /** @description Filter reports by sector */
        sector?: string;
        /** @description Filter reports by default inclusion status */
        isDefaultIncluded?: boolean;
        /** @description Filter reports by published status */
        isPublished?: boolean;
        /** @description Filter reports by purchase status */
        isPurchased?: boolean;
        /** @description Sort field (updated_at or created_at) */
        sort?: "updated_at" | "created_at";
        /** @description Sort order (asc or desc) */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successfully retrieved report previews */
      200: {
        content: {
          "application/json": components["schemas"]["GetPreviewsResponse"];
        };
      };
      400: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Get Acquisition Deals
   * @description Lookup M&A Deals given a set of filters
   */
  getAcquisitionDeals: {
    parameters: {
      query?: {
        /** @description Comma-separated list of acquiring entity (projects, organizations) uuids */
        acquiringEntityId?: string;
        /** @description Comma-separated list of acquired entity (projects, organizations) uuids */
        acquiredEntityId?: string;
        /** @description Filter by minimum transaction amount in USD */
        transactionAmountMin?: number;
        /** @description Filter by maximum transaction amount in USD */
        transactionAmountMax?: number;
        /** @description Filter by deals announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by deals announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["AcquisitionDeal"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Organizations
   * @description Lookup Organizations given a set of filters
   */
  getOrganizations: {
    parameters: {
      query?: {
        /** @description Comma-separated list of organization uuids to filter by */
        id?: string;
        /** @description Comma-separated list of categories to filter by */
        category?: string;
        /** @description Comma-separated list of sectors to filter by */
        sector?: string;
        /** @description Comma-separated list of tags to filter by */
        tags?: string;
        /** @description Filter by organizations founded before the specified date */
        foundedBefore?: string;
        /** @description Filter by organizations founded after the specified date */
        foundedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Organization"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Projects
   * @description Lookup Projects given a set of filters
   */
  getProjects: {
    parameters: {
      query?: {
        /** @description Comma-separated list of project uuids to filter by */
        id?: string;
        /** @description Comma-separated list of categories to filter by */
        category?: string;
        /** @description Comma-separated list of sectors to filter by */
        sector?: string;
        /** @description Comma-separated list of tags to filter by */
        tags?: string;
        /** @description Filter by projects founded before the specified date */
        foundedBefore?: string;
        /** @description Filter by projects founded after the specified date */
        foundedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Project"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Fundraising Rounds
   * @description Gets a list of all fundraising rounds
   */
  getFundingRounds: {
    parameters: {
      query?: {
        /** @description Comma-separated list of projects or organizations uuids which received funding */
        fundedEntityId?: string;
        /** @description Comma-separated list of investor (persons, projects, orgs) IDs who invested in the funding rounds */
        investorId?: string;
        /** @description Comma-separated list of funding round types to filter by */
        type?: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
        /** @description Comma-separated list of funding round stages to filter by */
        stage?: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
        /** @description Filter by maximum amount raised in USD */
        raisedAmountMax?: number;
        /** @description Filter by minimum amount raised in USD */
        raisedAmountMin?: number;
        /** @description Filter by rounds that were funded with tokens */
        isTokenFunded?: boolean;
        /** @description Filter by rounds announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by rounds announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["FundingRound"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Fundraising Rounds Investors
   * @description Gets a list of all investors for a given fundraising round
   */
  getFundingRoundsInvestors: {
    parameters: {
      query?: {
        /** @description Comma-separated list of projects or organizations uuids which received funding */
        fundedEntityId?: string;
        /** @description Comma-separated list of investor (persons, projects, orgs) IDs who invested in the funding rounds */
        investorId?: string;
        /** @description Comma-separated list of funding round types to filter by */
        type?: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
        /** @description Comma-separated list of funding round stages to filter by */
        stage?: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
        /** @description Filter by maximum amount raised in USD */
        raisedAmountMax?: number;
        /** @description Filter by minimum amount raised in USD */
        raisedAmountMin?: number;
        /** @description Filter by rounds that were funded with tokens */
        isTokenFunded?: boolean;
        /** @description Filter by rounds announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by rounds announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Investors"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get all assets
   * @description Returns a list of assets.
   * Supports pagination and filtering by name or symbol.
   */
  getAllAssets: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset symbols (comma-separated) */
        symbol?: string;
        /** @description Filter by asset names (comma-separated) */
        name?: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Asset"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get all events
   * @description Returns a list of events based on the provided filters.
   * Supports pagination and filtering by various parameters.
   */
  getAllEvents: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetAllEventsRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Event"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get event and its history
   * @description Returns a specific event by ID along with its history.
   */
  getEventAndHistory: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
      path: {
        /** @description ID of the event to retrieve */
        eventId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["GetEventResponse"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * List Exchanges
   * @description Get a list of exchanges with metadata and associated metrics snapshot.
   */
  getExchanges: {
    parameters: {
      query?: {
        limit?: number;
        pageSize?: number;
        page?: number;
        type?: string;
        typeRankCutoff?: number;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Exchange"][];
            error?: string;
            metadata?: components["schemas"]["SnapshotListingMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get Exchange Timeseries Metrics
   * @description Fetch timeseries metrics for a specific exchange.
   */
  getExchangeTimeseries: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      path: {
        entityIdentifier: string;
        datasetSlug: string;
        granularity: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesData"];
            error?: string;
            metadata?: components["schemas"]["TimeseriesMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get Exchange Details
   * @description Get detailed information for a specific exchange.
   */
  getExchange: {
    parameters: {
      path: {
        exchangeIdentifier: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Exchange"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List Exchange Metrics
   * @description Get metric catalog of datasets for exchanges.
   */
  getExchangeMetrics: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesCatalog"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List Markets
   * @description Retrieves a list of markets. Results can be filtered by exchange, quote asset, base asset and 24h volume
   */
  getMarkets: {
    parameters: {
      query?: {
        limit?: number;
        pageSize?: number;
        page?: number;
        exchangeId?: string;
        exchangeSlug?: string;
        quoteAssetId?: string;
        quoteAssetSlug?: string;
        baseAssetId?: string;
        baseAssetSlug?: string;
        volume24hAbove?: number;
        volume24hBelow?: number;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Market"][];
            error?: string;
            metadata?: components["schemas"]["SnapshotListingMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get market timeseries data
   * @description Retrieve a specific market's timeseries data
   */
  getMarketTimeseries: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      path: {
        entityIdentifier: string;
        datasetSlug: string;
        granularity: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesData"];
            error?: string;
            metadata?: components["schemas"]["TimeseriesMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get market
   * @description Retrieve a specific market
   */
  getMarket: {
    parameters: {
      path: {
        marketIdentifier: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Market"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List Exchange Metrics
   * @description Returns a list of timeseries metrics available for exchanges.
   */
  getMarketMetrics: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesCatalog"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get networks
   * @description Retrieve a list of networks
   */
  getNetworks: {
    parameters: {
      query?: {
        limit?: number;
        pageSize?: number;
        page?: number;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Network"][];
            error?: string;
            metadata?: components["schemas"]["SnapshotListingMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get network timeseries data
   * @description Retrieve a specific network's timeseries data
   */
  getNetworkTimeseries: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      path: {
        entityIdentifier: string;
        datasetSlug: string;
        granularity: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesData"];
            error?: string;
            metadata?: components["schemas"]["TimeseriesMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get network
   * @description Retrieve a specific network
   */
  getNetwork: {
    parameters: {
      path: {
        networkIdentifier: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Network"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List Exchange Metrics
   * @description Get metric catalog of datasets for networks.
   */
  getNetworkMetrics: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesCatalog"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get assets
   * @description Retrieve a list of assets
   */
  getAssetsV2: {
    parameters: {
      query?: {
        category?: string;
        sector?: string;
        tags?: string[];
        search?: string;
        limit?: number;
        hasDiligence?: boolean;
        hasIntel?: boolean;
        hasMarketData?: boolean;
        hasNews?: boolean;
        hasProposals?: boolean;
        hasResearch?: boolean;
        hasTokenUnlocks?: boolean;
        hasFundraising?: boolean;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["V2AssetListItem"][];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get asset timeseries data
   * @description Retrieve a specific asset's timeseries data
   */
  getAssetTimeseries: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      path: {
        entityIdentifier: string;
        datasetSlug: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesData"];
            error?: string;
            metadata?: components["schemas"]["TimeseriesMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get asset timeseries data
   * @description Retrieve a specific asset's timeseries data
   */
  getAssetTimeseriesWithGranularity: {
    parameters: {
      query?: {
        start?: string;
        end?: string;
      };
      path: {
        entityIdentifier: string;
        datasetSlug: string;
        granularity: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesData"];
            error?: string;
            metadata?: components["schemas"]["TimeseriesMetadata"];
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get asset ATH
   * @description Retrieve a specific asset's ATH
   */
  getAssetsV2ATH: {
    parameters: {
      query?: {
        ids?: string;
        slugs?: string;
        category?: string;
        sector?: string;
        tags?: string[];
        search?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["AssetComparisonItem"][];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get asset details
   * @description Retrieve a specific asset's details
   */
  getAssetDetails: {
    parameters: {
      query?: {
        ids?: string;
        slugs?: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["V2Asset"][];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List Exchange Metrics
   * @description Get metric catalog of datasets for assets.
   */
  getAssetsTimeseriesCatalog: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["TimeseriesCatalog"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get asset ROI
   * @description Retrieve a specific asset's ROI
   */
  getAssetsV2ROI: {
    parameters: {
      query?: {
        ids?: string;
        slugs?: string;
        category?: string;
        sector?: string;
        tags?: string[];
        search?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["AssetComparisonItem"][];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get assets mentioned in news
   * @description Returns a list of assets that are mentioned in news articles.
   * Supports pagination and filtering by asset name or symbol.
   */
  getNewsFeedAssets: {
    parameters: {
      query?: {
        /** @description A case-sensitive text to search by asset name, i.e. Bitcoin, or priority symbol, i.e. BTC */
        nameOrSymbol?: string;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["AssetList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get news feed
   * @description Returns a list of news articles.
   * Supports pagination and filtering by various parameters.
   */
  getNewsFeed: {
    parameters: {
      query?: {
        /** @description Timestamp in milliseconds UTC. If publishedBefore is provided, publishedAfter must be greater. */
        publishedBefore?: number;
        /** @description Timestamp in milliseconds UTC. */
        publishedAfter?: number;
        /** @description List of source types to filter by. If provided, the results will be filtered by these source types. */
        sourceTypes?: ("Blog" | "Forum" | "News")[];
        /** @description List of source IDs to filter by. If provided, the results will be filtered by these source IDs. */
        sourceIds?: string[];
        /** @description List of asset IDs to filter by. If provided, the results will be filtered by these asset IDs. */
        assetIds?: string[];
        /** @description Sort by publish time in ascending or descending order. 2 (DESC) by default. */
        sort?: 1 | 2;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["DocumentList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get news sources
   * @description Returns a list of news sources.
   * Supports pagination and filtering by source name.
   */
  getNewsSources: {
    parameters: {
      query?: {
        /** @description A case-sensitive text to search by source name, i.e. CoinDesk */
        sourceName?: string;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["SourceList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get Research Reports
   * @description Get a paginated list of research reports.
   */
  getResearchReports: {
    parameters: {
      query: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset ID. */
        assetId?: string;
        /** @description Filter by asset tags (comma-separated) */
        tags?: string;
        /** @description Filter by content type. */
        contentType: "html" | "markdown";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["ResearchReport"][];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Research Report by ID
   * @description Get a research report by its ID.
   */
  getResearchReportById: {
    parameters: {
      path: {
        /** @description ID of the research report */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["ResearchReport"];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Research Report Tags
   * @description Get a list of all tags associated with research reports.
   */
  getResearchReportTags: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data: string[];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock allocations
   * @description Returns allocation information given a set of asset IDs
   */
  getTokenUnlockAllocations: {
    parameters: {
      query?: {
        /** @description Filter by asset IDs (comma-separated) */
        assetIDs?: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock allocations */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockAllocation"][];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock supported assets
   * @description Get all token unlock supported assets
   */
  getTokenUnlockSupportedAssets: {
    parameters: {
      query?: {
        /** @description Filter by asset IDs (comma-separated) */
        assetIDs?: string;
        /** @description Filter by asset category (comma-separated) */
        category?: string;
        /** @description Filter by asset sectors (comma-separated) */
        sectors?: string;
        /** @description Filter by asset tags (comma-separated) */
        tags?: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock supported assets */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockSupportedAsset"][];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock events
   * @description Returns unlock events for a given asset ID
   */
  getTokenUnlockEvents: {
    parameters: {
      query?: {
        /** @description RFC3339 formatted time from which to start fetching unlock events data. */
        startTime?: string;
        /** @description RFC3339 formatted time where to end fetching unlock events data. */
        endTime?: string;
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock events */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockEvent"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock unlocks
   * @description Returns interval-based unlock timeseries data for a given asset and interval
   */
  getTokenUnlocks: {
    parameters: {
      query: {
        /** @description RFC3339 formatted time from which to start fetching vesting schedule data. */
        startTime: string;
        /** @description RFC3339 formatted time where to end fetching vesting schedule data. */
        endTime: string;
        /** @description Time intervals that that the data is aggregated over. Available values: DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY. */
        interval: "DAILY" | "WEEKLY" | "MONTHLY" | "QUARTERLY" | "YEARLY";
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock unlocks */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockUnlocks"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock vesting schedule
   * @description Returns vesting schedule timeseries data for a given asset
   */
  getTokenUnlockVestingSchedule: {
    parameters: {
      query: {
        /** @description RFC3339 formatted time from which to start fetching vesting schedule data. */
        startTime: string;
        /** @description RFC3339 formatted time where to end fetching vesting schedule data. */
        endTime: string;
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock vesting schedule timeseries data */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockVestingSchedule"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get a team's current credit allowance
   * @description #### Controller:
   *
   * `github.com/messari/user-service/internal/api/handler/permissioned/credit.(*creditHandler).GetTeamAllowance`
   *
   * ---
   */
  getTeamAllowance: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["AllowanceInfo"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get all permissions with active status
   * @description Returns all available permissions with flags indicating which ones are granted to the current user
   */
  getPermissions: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["PermissionsResponse"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * List user's watchlists
   * @description Get all watchlists for the authenticated user
   */
  listWatchlists: {
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Watchlist"][];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Create a new watchlist
   * @description Create a new watchlist for the authenticated user
   */
  createWatchlist: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWatchlistRequest"];
      };
    };
    responses: {
      /** @description Default response */
      201: {
        content: {
          "application/json": {
            data: components["schemas"]["Watchlist"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Get a watchlist
   * @description Get a specific watchlist by ID for the authenticated user
   */
  getWatchlist: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Watchlist"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a watchlist
   * @description Delete a specific watchlist by ID for the authenticated user
   */
  deleteWatchlist: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Update a watchlist
   * @description Update a specific watchlist by ID for the authenticated user
   */
  updateWatchlist: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWatchlistRequest"];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Watchlist"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Modify watchlist assets
   * @description Modify the assets in a specific watchlist by ID for the authenticated user
   */
  modifyWatchlistAssets: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyWatchlistAssetsRequest"];
      };
    };
    responses: {
      /** @description Default response */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["Watchlist"];
            error?: string;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": {
            data: unknown;
            error?: string;
          };
        };
      };
    };
  };
};
