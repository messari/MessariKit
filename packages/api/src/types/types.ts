/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/ai-digest/api/v1/exchange-rankings-recap": {
    /**
     * Get Exchange Rankings Recap
     * @description Gets daily recap for the exchange rankings page
     */
    get: operations["getExchangeRankingsRecap"];
  };
  "/ai-digest/api/v1/exchange-recap": {
    /**
     * Get Exchange Recap
     * @description Gets news and performance recap for a given exchange
     */
    get: operations["getExchangeRecap"];
  };
  "/ai-digest/api/v1/recap": {
    /**
     * Get Recap
     * @description Gets a recap of the latest news and intel for a given set of assets
     */
    get: operations["getProjectRecap"];
  };
  "/ai/v1/chat/completions": {
    /**
     * Chat Completion
     * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
     * The last message must be from the user role.
     */
    post: operations["createChatCompletion"];
  };
  "/ai/v1/classification/extraction": {
    /**
     * Entity Extraction
     * @description Extracts entities from the provided text content using AI models and database lookups.
     * Supports various entity types and can return similar entities based on the extracted names.
     */
    post: operations["extractEntities"];
  };
  "/asset/v1/assets": {
    /**
     * Get Asset List
     * @description Get a paginated list of assets.
     * Each filter allows multiple values, comma-separated.
     * All assets that match any of the values for a given filter will be returned,
     * as long as they are not filtered out by other filters.
     */
    get: operations["getAssetList"];
  };
  "/diligence/v1/report/asset/{assetId}": {
    /**
     * Get Diligence Report
     * @description Gets a specific diligence report by asset ID. Requires authentication and appropriate enterprise access.
     */
    get: operations["getReportByAssetID"];
  };
  "/diligence/v1/reports/preview": {
    /**
     * Get Diligence Previews
     * @description Gets a preview of the available diligence reports
     */
    get: operations["getPreviews"];
  };
  "/funding/v1/mergers-and-acquisitions": {
    /**
     * Get Acquisition Deals
     * @description Lookup M&A Deals given a set of filters
     */
    get: operations["getAcquisitionDeals"];
  };
  "/funding/v1/organizations": {
    /**
     * Get Organizations
     * @description Lookup Organizations given a set of filters
     */
    get: operations["getOrganizations"];
  };
  "/funding/v1/projects": {
    /**
     * Get Projects
     * @description Lookup Projects given a set of filters
     */
    get: operations["getProjects"];
  };
  "/funding/v1/rounds": {
    /**
     * Get Fundraising Rounds
     * @description Gets a list of all fundraising rounds
     */
    get: operations["getFundingRounds"];
  };
  "/funding/v1/rounds/investors": {
    /**
     * Get Fundraising Rounds Investors
     * @description Gets a list of all investors for a given fundraising round
     */
    get: operations["getFundingRoundsInvestors"];
  };
  "/intel/v1/assets": {
    /**
     * Get all assets
     * @description Returns a list of assets.
     * Supports pagination and filtering by name or symbol.
     */
    get: operations["getAllAssets"];
  };
  "/intel/v1/events": {
    /**
     * Get all events
     * @description Returns a list of events based on the provided filters.
     * Supports pagination and filtering by various parameters.
     */
    post: operations["getAllEvents"];
  };
  "/intel/v1/events/{eventId}": {
    /**
     * Get event and its history
     * @description Returns a specific event by ID along with its history.
     */
    get: operations["getEventAndHistory"];
  };
  "/marketdata/v1/assets/{assetId}/ath": {
    /**
     * Asset ATH
     * @description Returns a single asset's ATH data
     */
    get: operations["getAssetATH"];
  };
  "/marketdata/v1/assets/{assetId}/price": {
    /**
     * Asset Market Data
     * @description Returns a single asset's market data
     */
    get: operations["getAssetMarketdata"];
  };
  "/marketdata/v1/assets/{assetId}/roi": {
    /**
     * ROI by Asset
     * @description Returns a single asset's ROI data
     */
    get: operations["getAssetROI"];
  };
  "/marketdata/v1/assets/ath": {
    /**
     * ATHs
     * @description Returns a list of all time high data for all assets
     */
    get: operations["getAssetsATH"];
  };
  "/marketdata/v1/assets/roi": {
    /**
     * ROIs
     * @description Returns a list ROI data for all assets
     */
    get: operations["getAssetsROI"];
  };
  "/news/v1/news/assets": {
    /**
     * Get assets mentioned in news
     * @description Returns a list of assets that are mentioned in news articles.
     * Supports pagination and filtering by asset name or symbol.
     */
    get: operations["getNewsFeedAssets"];
  };
  "/news/v1/news/feed": {
    /**
     * Get news feed
     * @description Returns a list of news articles.
     * Supports pagination and filtering by various parameters.
     */
    get: operations["getNewsFeed"];
  };
  "/news/v1/news/sources": {
    /**
     * Get news sources
     * @description Returns a list of news sources.
     * Supports pagination and filtering by source name.
     */
    get: operations["getNewsSources"];
  };
  "/research/v1/reports": {
    /**
     * Get Research Reports
     * @description Get a paginated list of research reports.
     */
    get: operations["getResearchReports"];
  };
  "/research/v1/reports/{id}": {
    /**
     * Get Research Report by ID
     * @description Get a research report by its ID.
     */
    get: operations["getResearchReportById"];
  };
  "/research/v1/reports/tags": {
    /**
     * Get Research Report Tags
     * @description Get a list of all tags associated with research reports.
     */
    get: operations["getResearchReportTags"];
  };
  "/token-unlocks/v1/allocations": {
    /**
     * Get token unlock allocations
     * @description Returns allocation information given a set of asset IDs
     */
    get: operations["getTokenUnlockAllocations"];
  };
  "/token-unlocks/v1/assets": {
    /**
     * Get token unlock supported assets
     * @description Get all token unlock supported assets
     */
    get: operations["getTokenUnlockSupportedAssets"];
  };
  "/token-unlocks/v1/assets/{assetId}/events": {
    /**
     * Get token unlock events
     * @description Returns unlock events for a given asset ID
     */
    get: operations["getTokenUnlockEvents"];
  };
  "/token-unlocks/v1/assets/{assetId}/unlocks": {
    /**
     * Get token unlock unlocks
     * @description Returns interval-based unlock timeseries data for a given asset and interval
     */
    get: operations["getTokenUnlocks"];
  };
  "/token-unlocks/v1/assets/{assetId}/vesting-schedule": {
    /**
     * Get token unlock vesting schedule
     * @description Returns vesting schedule timeseries data for a given asset
     */
    get: operations["getTokenUnlockVestingSchedule"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    AcquisitionDeal: {
      /** @description Entity that is being acquired */
      acquiredEntity?: components["schemas"]["FundingEntity"];
      /** @description Entity that is acquiring */
      acquiringEntity?: components["schemas"]["FundingEntity"];
      /**
       * Format: date-time
       * @description Date when the acquisition deal was announced
       */
      announcementDate?: string;
      /** @description List of announcements related to the acquisition deal */
      announcements?: components["schemas"]["Announcement"][];
      /** @description Unique identifier for the acquisition deal */
      id?: string;
      /** @description Status of the acquisition deal */
      status?: components["schemas"]["AcquisitionDealStatus"];
      /**
       * Format: double
       * @description Transaction amount in USD
       */
      transactionAmountUSD?: number | null;
    };
    /**
     * @description Status of the acquisition deal
     * @enum {string}
     */
    AcquisitionDealStatus: "Announced" | "Completed" | "Canceled";
    /** @description Announcement details (to be defined) */
    Announcement: Record<string, never>;
    APIError: {
      /**
       * @description Error message when something goes wrong
       * @example Internal server error, please try again
       */
      error: string;
    };
    /** @description Standard response wrapper. */
    APIResponse: {
      /** @description Response payload */
      data: Record<string, never> | string[];
      /** @description Error message if request failed */
      error?: string;
    };
    /**
     * @description Standard response wrapper with additional metadata.
     * This type should be treated as generic in TypeScript: APIResponseWithMetadata<T, M>.
     * T represents the data type, M represents the metadata type.
     */
    APIResponseWithMetadata: {
      /** @description Response payload */
      data: Record<string, never>;
      /** @description Error message if request failed */
      error?: string;
      /** @description Additional metadata about the response */
      metadata?: Record<string, never>;
    };
    Asset: {
      /** @description Unique identifier for the asset */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Slug of the asset */
      slug: string;
      /** @description Symbol of the asset */
      symbol: string;
    };
    /** @description List of assets */
    AssetList: components["schemas"]["NewsAsset"][];
    AssetMarketcap: {
      /** Format: double */
      circulatingUsd?: number;
      /** Format: double */
      dominance?: number;
      /** Format: double */
      fullyDilutedUsd?: number;
    };
    AssetMarketData: {
      lastPriceAt?: components["schemas"]["TimeUTC"];
      lastTradeAt?: components["schemas"]["TimeUTC"];
      marketcap?: components["schemas"]["AssetMarketcap"];
      ohlcv1Hour?: components["schemas"]["OHLCV"];
      ohlcv24Hours?: components["schemas"]["OHLCV"];
      /** Format: double */
      percentChangeBtc1Hour?: number;
      /** Format: double */
      percentChangeBtc24Hours?: number;
      /** Format: double */
      percentChangeEth1Hour?: number;
      /** Format: double */
      percentChangeEth24Hours?: number;
      /** Format: double */
      percentChangeUsd1Hour?: number;
      /** Format: double */
      percentChangeUsd24Hours?: number;
      /** Format: double */
      priceBtc?: number;
      /** Format: double */
      priceEth?: number;
      /** Format: double */
      priceUsd?: number;
      /** Format: double */
      realVolume24Hours?: number;
      supply?: components["schemas"]["AssetSupply"];
      /** Format: double */
      volume24Hours?: number;
      /** Format: double */
      volume24HoursOverstatementMultiple?: number;
    };
    AssetReport: components["schemas"]["ReportResponse"] & {
      /**
       * @default asset
       * @enum {string}
       */
      lookupType?: "asset";
    };
    AssetSupply: {
      /** Format: double */
      circulating?: number;
      /** Format: double */
      max?: number;
      /** Format: double */
      total?: number;
    };
    AssetWithATHData: {
      allTimeHighData?: {
        at?: components["schemas"]["TimeUTC"];
        /** Format: double */
        breakevenMultiple?: number;
        /** Format: double */
        daysSince?: number;
        /** Format: double */
        percentDown?: number;
        /** Format: double */
        price?: number;
      };
      contractAddresses?: components["schemas"]["PlatformContract"][];
      cycleLowData?: {
        at?: components["schemas"]["TimeUTC"];
        /** Format: double */
        daysSince?: number;
        /** Format: double */
        percentUp?: number;
        /** Format: double */
        price?: number;
      };
      id?: string;
      name?: string;
      slug?: string;
      symbol?: string;
    };
    AssetWithROIData: {
      contractAddresses?: components["schemas"]["PlatformContract"][];
      id?: string;
      name?: string;
      roiData?: components["schemas"]["ROIData"];
      slug?: string;
      symbol?: string;
    };
    Author: {
      /** @description Unique identifier for the author */
      id: string;
      /** @description Image URL of the author */
      image: string;
      /** @description LinkedIn URL of the author */
      linkedinUrl: string;
      /** @description Name of the author */
      name: string;
    };
    BasicAsset: {
      /** @description Category of the asset */
      category: string;
      /**
       * Format: uuid
       * @description Unique identifier for the asset
       */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Rank of the asset (optional) */
      rank?: number | null;
      /** @description Sector of the asset */
      sector: string;
      /**
       * Format: int32
       * @description Serial identifier for the asset
       */
      serialId: number;
      /** @description Slug of the asset */
      slug: string;
      /** @description Symbol of the asset */
      symbol: string;
      /** @description Tags associated with the asset */
      tags: string[];
    };
    ChatCompletionMessage: {
      /** @description The message content */
      content: string;
      /**
       * @description The role of the message sender
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
    };
    ChatCompletionRequest: {
      /** @description Array of messages in the conversation */
      messages: components["schemas"]["ChatCompletionMessage"][];
      /**
       * @description Desired format of the response
       * @enum {string}
       */
      response_format?: "text" | "json" | "markdown";
      /**
       * @description Whether to stream the response
       * @default false
       */
      stream?: boolean;
      /**
       * @description Controls how verbose the response should be
       * @enum {string}
       */
      verbosity?: "concise" | "normal" | "detailed";
    };
    ChatCompletionResponse: {
      /** @description Array of response messages */
      messages: components["schemas"]["ChatCompletionMessage"][];
    };
    ChatCompletionResponseMetadata: {
      /** @description Current status of the chat completion */
      status: string;
    };
    Document: {
      /** @description Assets mentioned in the document */
      assets?: components["schemas"]["NewsAsset"][];
      /** @description Content of the document */
      content?: string;
      /**
       * Format: uuid
       * @description Unique identifier for the document
       */
      id: string;
      /**
       * Format: int64
       * @description Published timestamp in milliseconds UTC
       */
      publishTimeMillis: number;
      /** @description Source of the document */
      source?: components["schemas"]["Source"];
      /** @description Title of the document */
      title: string;
      /**
       * Format: uri
       * @description URL of the document
       */
      url?: string;
    };
    /** @description List of news documents */
    DocumentList: components["schemas"]["Document"][];
    Entity: {
      /**
       * Format: float
       * @description Confidence score of the entity match
       */
      confidence?: number;
      /** @description Unique identifier for the entity */
      id?: string;
      /** @description Name of the entity */
      name?: string;
      type?: components["schemas"]["EntityType"];
    };
    /**
     * @description Type of entity being extracted or referenced
     * @enum {string}
     */
    EntityType: "acquired_entity" | "acquiring_entity" | "asset" | "x_user" | "funded_entity" | "investor" | "network" | "person" | "exchange" | "organization" | "project" | "protocol" | "nft_collection";
    Event: {
      /** @description Block number when the event activates */
      activationBlock?: number | null;
      /** @description Category of the event */
      category: string;
      /** @description Date when the event occurred or will occur */
      eventDate?: string | null;
      /** @description Detailed description of the event */
      eventDetails: string;
      /** @description Name of the event */
      eventName: string;
      /** @description Whether the event is global */
      globalEvent: boolean;
      /** @description Unique identifier for the event */
      id: string;
      /** @description Importance level of the event */
      importance: string;
      /** @description Primary assets related to the event */
      primaryAssets: components["schemas"]["Asset"][];
      /** @description Resources related to the event */
      resources?: components["schemas"]["Resource"][];
      /** @description Secondary assets related to the event */
      secondaryAssets?: components["schemas"]["Asset"][];
      /** @description Current status of the event */
      status: string;
      /** @description Subcategory of the event */
      subcategory: string;
      /**
       * Format: date-time
       * @description Date when the event was submitted
       */
      submissionDate: string;
      /** @description Tag associated with the event */
      tag: string;
      /** @description Details about the latest update to the event */
      updateDetails?: string | null;
    };
    EventHistory: {
      /** @description Importance level at this point in history */
      importance: string;
      /** @description Status at this point in history */
      status: string;
      /**
       * Format: date-time
       * @description Date when the history entry was submitted
       */
      submissionDate: string;
      /** @description Details about the update */
      updateDetails?: string | null;
    };
    /** @description News recap for exchanges */
    ExchangeNewsRecap: {
      id?: string;
      news?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      summaries?: {
          _category?: number;
          references?: {
              id?: string;
              publishDate?: string;
              sourceId?: string;
              sourceName?: string;
              title?: string;
              url?: string;
            }[];
          summary?: string;
        }[];
    };
    /** @description Performance recap for exchanges */
    ExchangePerformanceRecap: {
      data?: {
        exchangeId?: string;
        exchangeName?: string;
        exchangeType?: string;
        last30DaysVolume?: number;
        percentChangeVolume?: number;
        previous30DaysVolume?: number;
        region?: string;
        total30DVolumePercentChangeForAllExchanges?: number;
        total30DVolumePercentChangeForExchangeType?: number;
      };
      id?: string;
      summary?: string;
    };
    /** @description News recap for exchange rankings */
    ExchangeRankingsNewsRecap: {
      id?: string;
      news?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      summaries?: {
          _category?: number;
          references?: {
              id?: string;
              publishDate?: string;
              sourceId?: string;
              sourceName?: string;
              title?: string;
              url?: string;
            }[];
          summary?: string;
        }[];
      summary?: string;
    };
    /** @description Performance recap for exchange rankings */
    ExchangeRankingsPerformanceRecap: {
      data?: {
        /** @description List of top exchanges */
        topExchanges?: {
            id?: string;
            name?: string;
            project_id?: string;
            slug?: string;
            type?: string;
          }[];
        /** @description List of top listed tokens */
        topListedTokens?: {
            assetId?: string;
            listedCount?: number;
            name?: string;
            symbol?: string;
          }[];
        /** @description Volume of top listed tokens */
        topListedTokenVolume?: number;
        /** @description Total spot trading volumes */
        totalSpotVolumes?: number;
      };
      id?: string;
      summary?: string;
    };
    ExchangeRankingsRecap: {
      /**
       * Format: uuid
       * @description Unique identifier for the recap
       */
      id?: string;
      /** @description News recap information */
      newsRecap?: components["schemas"]["ExchangeRankingsNewsRecap"];
      /** @description Performance recap information */
      performanceRecap?: components["schemas"]["ExchangeRankingsPerformanceRecap"];
      /** @description Brief recap points */
      recapBrief?: components["schemas"]["ExchangeRecapPoint"][];
      /**
       * Format: date-time
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Time period of the recap */
      recapPeriod?: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
    };
    ExchangeRecap: {
      /** @description News recap information */
      newsRecap?: components["schemas"]["ExchangeNewsRecap"];
      /** @description Performance recap information */
      performanceRecap?: components["schemas"]["ExchangePerformanceRecap"];
      /** @description Brief recap points */
      recapBrief?: components["schemas"]["ExchangeRecapPoint"][];
      /**
       * Format: date-time
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Time period of the recap */
      recapPeriod?: components["schemas"]["RecapSlug"];
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
    };
    /** @description A single recap point for exchanges */
    ExchangeRecapPoint: {
      date?: string;
      endDate?: string;
      references?: {
          id?: string;
          publishDate?: string;
          sourceId?: string;
          sourceName?: string;
          title?: string;
          url?: string;
        }[];
      startDate?: string;
      summary?: string;
      type?: string;
    };
    ExtractRequest: {
      /**
       * @description Whether to return all similar entities or just the best matches
       * @default false
       */
      allSimilarEntities?: boolean;
      /** @description Text content to extract entities from */
      content: string;
      /** @description Types of entities to extract */
      entityTypes?: components["schemas"]["EntityType"][];
    };
    ExtractResponse: {
      /** @description List of extracted entities with their matches */
      extractedEntities: components["schemas"]["GroupedEntity"][];
    };
    ExtractResponseMetadata: {
      /** @description Current status of the extraction request */
      status?: string;
    };
    /** @description Entity that received funding (to be defined) */
    FundingEntity: Record<string, never>;
    FundingRound: {
      /**
       * Format: double
       * @description Amount raised in USD
       */
      amountRaisedUSD?: number | null;
      /**
       * Format: date-time
       * @description Date when the funding round was announced
       */
      announcementDate?: string;
      /** @description List of announcements related to the funding round */
      announcements?: components["schemas"]["Announcement"][];
      /** @description Entity that received the funding */
      fundedEntity?: components["schemas"]["FundingEntity"];
      /** @description Unique identifier for the funding round */
      id?: string;
      /** @description Whether the round was funded with tokens */
      isTokenFunded?: boolean;
      /** @description Stage of the funding round */
      stage?: components["schemas"]["FundingRoundStage"];
      /** @description Type of the funding round */
      type?: components["schemas"]["FundingRoundType"];
    };
    /**
     * @description Stage of the funding round
     * @enum {string}
     */
    FundingRoundStage: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
    /**
     * @description Type of the funding round
     * @enum {string}
     */
    FundingRoundType: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
    GetAllEventsRequest: {
      /** @description Filter by categories */
      category?: string[];
      /**
       * Format: date-time
       * @description Filter events before this time
       */
      endTime?: string;
      /** @description Filter by whether the event is global */
      globalEvent?: boolean | null;
      /** @description Filter by importance levels */
      importance?: string[];
      /**
       * @description Number of items per page
       * @default 20
       */
      limit?: number;
      /**
       * @description Page number for pagination
       * @default 1
       */
      page?: number;
      /** @description Filter by primary assets */
      primaryAssets?: string[];
      /** @description Filter by assets that are either primary or secondary */
      primaryOrSecondaryAssets?: string[];
      /** @description Filter by secondary assets */
      secondaryAssets?: string[];
      /**
       * Format: date-time
       * @description Filter events after this time
       */
      startTime?: string;
      /** @description Filter by status */
      status?: string[];
      /** @description Filter by subcategories */
      subcategory?: string[];
      /** @description Filter by tags */
      tag?: string[];
    };
    GetEventResponse: {
      /** @description The event details */
      event: components["schemas"]["Event"];
      /** @description History of the event */
      eventHistory: components["schemas"]["EventHistory"][];
    };
    GetPreviewsResponse: components["schemas"]["ReportResponse"][];
    /** @description List of project recaps */
    GetProjectRecapResponse: components["schemas"]["ProjectRecapResponse"][];
    GroupedEntity: {
      /** @description The name extracted from the content */
      extractedName?: string;
      /** @description The selected/best matching entity if available */
      selectedEntity?: components["schemas"]["SelectedEntity"];
      /** @description List of similar entities found */
      similarEntities?: components["schemas"]["Entity"][];
    };
    /** @description Intel information response */
    IntelResponse: {
      metadata?: {
          eventId?: string;
          eventName?: string;
        }[];
      summary?: string;
    };
    Investors: {
      /** @description ID of the funding round */
      fundingRoundId?: string;
      /** @description List of organizations that invested */
      organizations?: components["schemas"]["Organization"][];
      /** @description List of persons that invested */
      persons?: components["schemas"]["Person"][];
      /** @description List of projects that invested */
      projects?: components["schemas"]["Project"][];
    };
    /** @description Network metrics data */
    NetworkMetrics: {
      active_addresses?: number;
      active_addresses_percent_change?: number;
      dex_volume?: number;
      dex_volume_percent_change?: number;
      fee_revenue?: number;
      fee_revenue_percent_change?: number;
      tvl_percent_change?: number;
      tvl_usd?: number;
    };
    NewsAsset: {
      /**
       * Format: uuid
       * @description Unique identifier for the asset
       */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Symbol of the asset */
      symbol?: string;
    };
    /** @description News information response */
    NewsResponse: {
      metadata?: {
          documentId?: string;
          documentName?: string;
          documentUrl?: string;
          sourceId?: string;
          sourceName?: string;
          sourceType?: string;
        }[];
      summary?: string;
    };
    OHLCV: {
      /** Format: double */
      close?: number;
      /** Format: double */
      high?: number;
      /** Format: double */
      low?: number;
      /** Format: double */
      open?: number;
      timestamp?: components["schemas"]["TimeUTC"];
      /** Format: double */
      volume?: number;
    };
    Organization: {
      /** @description Category of the organization */
      category?: string;
      /**
       * Format: date-time
       * @description When the organization was founded
       */
      foundedAt?: string;
      /** @description Unique identifier for the organization */
      id?: string;
      /** @description Location of the organization */
      location?: string;
      /** @description Name of the organization */
      name?: string;
      /** @description Sector of the organization */
      sector?: string;
      /** @description Tags associated with the organization */
      tags?: string[];
    };
    /** @description Pagination metadata for list endpoints */
    PaginationResult: {
      /**
       * @description Whether there are more pages available
       * @example true
       */
      hasMore?: boolean;
      /**
       * @description Number of items per page
       * @example 20
       */
      limit?: number;
      /**
       * @description Current page number
       * @example 1
       */
      page?: number;
      /**
       * @description Total number of items available
       * @example 100
       */
      total?: number;
    };
    /** @description Person details (to be defined) */
    Person: Record<string, never>;
    PlatformContract: {
      contractAddress?: string;
      platform?: string;
    };
    Project: {
      /** @description Category of the project */
      category?: string;
      /**
       * Format: date-time
       * @description When the project was founded
       */
      foundedAt?: string;
      /** @description Unique identifier for the project */
      id?: string;
      /** @description Name of the project */
      name?: string;
      /** @description ID of the primary asset associated with the project */
      primaryAssetId?: string | null;
      /** @description Sector of the project */
      sector?: string;
      /** @description Tags associated with the project */
      tags?: string[];
    };
    ProjectRecapResponse: {
      /** @description Unique identifier for the asset */
      asset_id?: string;
      /** @description Intel information */
      intel?: components["schemas"]["IntelResponse"];
      /** @description Count of intel items */
      intelCount?: number;
      /** @description Network metrics data */
      networkMetricsData?: components["schemas"]["NetworkMetrics"];
      /** @description News information */
      news?: components["schemas"]["NewsResponse"];
      /** @description Count of news items */
      newsCount?: number;
      /** @description Count of proposition items */
      propositionCount?: number;
      /** @description Propositions information */
      propositions?: components["schemas"]["PropositionResponse"];
      /**
       * Format: date
       * @description Date of the recap
       */
      recapDate?: string;
      /** @description Research information */
      research?: components["schemas"]["ResearchResponse"];
      /** @description Count of research items */
      researchCount?: number;
      /** @description Summary information */
      summary?: components["schemas"]["SummaryResponse"];
      /** @description Time period of the recap */
      timePeriod?: components["schemas"]["RecapSlug"];
      /** @description Token unlock information */
      unlocks?: components["schemas"]["TokenUnlockData"];
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
      /** @description Video and podcast ranking information */
      videoPodcastRanking?: components["schemas"]["VideoPodcastResponse"];
    };
    /** @description Proposition information response */
    PropositionResponse: {
      metadata?: {
          propositionId?: string;
          title?: string;
        }[];
      summary?: string;
    };
    /**
     * @description Time period for the recap
     * @enum {string}
     */
    RecapSlug: "daily" | "weekly" | "monthly";
    /** @description A diligence report response */
    ReportResponse: {
      /**
       * Format: uuid
       * @description Unique identifier for the asset
       */
      assetId?: string;
      /** @description Slug identifier for the asset */
      assetSlug?: string;
      /**
       * Format: uuid
       * @description Unique identifier for the report
       */
      id?: string;
      /**
       * Format: date-time
       * @description Timestamp of last revision
       */
      lastRevisedAt?: string;
      /** @description Name of the project */
      projectName?: string;
      /** @description Publication status of the report */
      publishStatus?: string;
      /** @description Map of report sections */
      sections?: {
        [key: string]: components["schemas"]["ReportSection"];
      };
      /** @description Sector classification */
      sector?: string;
      /** @description Slug identifier for the report */
      slug?: string;
      /** @description Asset symbol */
      symbol?: string | null;
    };
    /** @description A section within a diligence report */
    ReportSection: {
      /** @description Markdown content of the section */
      markdown?: string;
      /** @description Timestamp of last revision */
      updatedAt?: string;
    };
    ResearchReport: {
      /** @description Array of asset IDs associated with the research report */
      assetIds: string[];
      /** @description Array of authors associated with the research report */
      authors: components["schemas"]["Author"][];
      /** @description Content of the research report (either HTML or Markdown) */
      content: string;
      /**
       * Format: date-time
       * @description Date and time the research report was created
       */
      createdAt: string;
      /** @description Hook of the research report */
      hook: string;
      /**
       * Format: uuid
       * @description Unique identifier for the research report
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time the research report was published
       */
      publishDate: string;
      /**
       * Format: float
       * @description Estimated reading time in minutes
       */
      readingTimeInMinutes: number;
      /** @description Slug of the research report */
      slug: string;
      /** @description Subscription tier required to access the report */
      subscriptionTier: string;
      /** @description Summary of the research report */
      summary: string;
      /** @description Tags associated with the research report */
      tags: components["schemas"]["Tag"][];
      /** @description Title of the research report */
      title: string;
      /**
       * Format: date-time
       * @description Date and time the research report was updated
       */
      updatedAt: string;
    };
    /** @description Research information response */
    ResearchResponse: {
      metadata?: {
          slug?: string;
          title?: string;
        }[];
      summary?: string;
    };
    Resource: {
      /** @description Title of the resource */
      title?: string;
      /**
       * Format: uri
       * @description URL of the resource
       */
      url?: string;
    };
    ROIData: {
      /** Format: double */
      percentChange1Month?: number;
      /** Format: double */
      percentChange1Week?: number;
      /** Format: double */
      percentChange1Year?: number;
      /** Format: double */
      percentChange3Months?: number;
      /** Format: double */
      percentChangeBtc1Month?: number;
      /** Format: double */
      percentChangeBtc1Week?: number;
      /** Format: double */
      percentChangeBtc1Year?: number;
      /** Format: double */
      percentChangeBtc3Months?: number;
      /** Format: double */
      percentChangeEth1Month?: number;
      /** Format: double */
      percentChangeEth1Week?: number;
      /** Format: double */
      percentChangeEth1Year?: number;
      /** Format: double */
      percentChangeEth3Months?: number;
      /** Format: double */
      percentChangeMonthToDate?: number;
      /** Format: double */
      percentChangeQuarterToDate?: number;
      /** Format: double */
      percentChangeYearToDate?: number;
    };
    SelectedEntity: {
      confidenceScore?: string;
      /** @description Details of the entity */
      details?: {
          id?: string;
          type?: string;
        }[];
      /** @description Name of the entity */
      name?: string;
      relevanceScore?: string;
    };
    Source: {
      /**
       * Format: uuid
       * @description Unique identifier for the source
       */
      id: string;
      /** @description Name of the source */
      sourceName: string;
      /** @description Type of the source */
      sourceType: components["schemas"]["SourceType"];
    };
    /** @description List of news sources */
    SourceList: components["schemas"]["Source"][];
    /**
     * @description Type of news source
     * @enum {string}
     */
    SourceType: "News" | "Forum" | "Blog";
    /** @description Summary information */
    SummaryResponse: {
      summary?: string;
    };
    Tag: {
      /** @description Unique identifier for the tag */
      id: string;
      /** @description Name of the tag */
      name: string;
    };
    /**
     * Format: date-time
     * @description UTC timestamp
     */
    TimeUTC: string;
    TokenUnlockAllocation: {
      allocationRecipientCount?: number;
      allocations?: {
          allocationRecipient?: string;
          assumptions?: string;
          cumulativeUnlockedNative?: number;
          cumulativeUnlockedUSD?: number;
          description?: string;
          percentOfUnlocksCompleted?: number;
          sources?: {
              source?: string;
              sourceType?: string;
            }[];
          totalAllocationNative?: number;
          totalAllocationUSD?: number;
          unlocksRemainingNative?: number;
          unlocksRemainingUSD?: number;
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      cumulativeUnlockedNative?: number;
      cumulativeUnlockedUSD?: number;
      genesisDate?: string;
      lastUpdatedAt?: string;
      percentOfUnlocksCompleted?: number;
      projectedEndDate?: string;
      totalAllocationNative?: number;
      totalAllocationUSD?: number;
      unlocksRemainingNative?: number;
      unlocksRemainingUSD?: number;
    };
    /** @description Token unlock information */
    TokenUnlockData: {
      nextCliffUnlockData?: {
        nextAmountPercentOfCirculatingSupply?: number;
        nextUnlockAmount?: number;
        nextUnlockAmountUSD?: number;
        timestamp?: string;
      };
      tokenUnlockDetails?: {
        circulatingSupplyIncreaseFuturePct?: number;
        circulatingSupplyIncreasePastPct?: number;
        futureAmountUnlocked?: number;
        futureAmountUnlockedUSD?: number;
        pastAmountUnlocked?: number;
        pastAmountUnlockedUSD?: number;
        pctUnlocksCompleted?: number;
        totalUnlocked?: number;
      };
    };
    TokenUnlockEvent: {
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      unlockEvents?: {
          cliff?: {
            allocations?: {
                allocationRecipient?: string;
                amountNative?: number;
                amountUSD?: number;
                percentOfTotalAllocation?: number;
              }[];
            amountNative?: number;
            amountUSD?: number;
            percentOfTotalAllocation?: number;
          };
          dailyLinearRateChange?: {
            allocations?: {
                allocationRecipient?: string;
                dailyAmountNative?: number;
                dailyAmountUSD?: number;
                nextDailyAmountNative?: number;
                nextDailyAmountUSD?: number;
                nextPercentOfTotalAllocation?: number;
                percentChangeOfRate?: number;
                percentOfTotalAllocation?: number;
              }[];
            dailyAmountNative?: number;
            dailyAmountUSD?: number;
            nextDailyAmountNative?: number;
            nextDailyAmountUSD?: number;
            nextPercentOfTotalAllocation?: number;
            percentChangeOfRate?: number;
            percentOfTotalAllocation?: number;
          };
          timestamp?: string;
        }[];
    };
    TokenUnlockSupportedAsset: {
      category?: string;
      genesisDate?: string;
      id?: string;
      name?: string;
      otherInfo?: string;
      projectedEndDate?: string;
      sector?: string;
      serialId?: number;
      slug?: string;
      symbol?: string;
      tags?: string[];
    };
    TokenUnlockUnlocks: {
      allocations?: {
          allocationRecipient?: string;
          dailySnapshots?: {
              timestamp?: string;
              unlockedInPeriodNative?: number;
              unlockedInPeriodUSD?: number;
            }[];
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      endDate?: string;
      genesisDate?: string;
      /** @enum {string} */
      interval?: "DAILY";
      projectedEndDate?: string;
      startDate?: string;
      totalSnapshots?: {
          timestamp?: string;
          unlockedInPeriodNative?: number;
          unlockedInPeriodUSD?: number;
        }[];
    };
    TokenUnlockVestingSchedule: {
      allocations?: {
          allocationRecipient?: string;
          dailySnapshots?: {
              cumulativeUnlockedNative?: number;
              cumulativeUnlockedUSD?: number;
              percentOfUnlocksCompleted?: number;
              timestamp?: string;
              unlocksRemainingNative?: number;
              unlocksRemainingUSD?: number;
            }[];
        }[];
      asset?: {
        id?: string;
        name?: string;
        slug?: string;
        symbol?: string;
      };
      endTime?: string;
      genesisDate?: string;
      projectedEndDate?: string;
      startTime?: string;
      totalDailySnapshots?: {
          cumulativeUnlockedNative?: number;
          cumulativeUnlockedUSD?: number;
          percentOfUnlocksCompleted?: number;
          timestamp?: string;
          unlocksRemainingNative?: number;
          unlocksRemainingUSD?: number;
        }[];
    };
    /** @description Video and podcast ranking information */
    VideoPodcastResponse: {
      summary?: {
          id?: string;
          sourceID?: string;
          sourceName?: string;
          summary?: string;
          title?: string;
          url?: string;
        }[];
    };
  };
  responses: {
    /** @description Standard error response */
    ErrorResponse: {
      content: never;
    };
  };
  parameters: {
    /** @description API key for authentication */
    apiKey: string;
    /** @description Number of items per page */
    limit?: number;
    /** @description Page number for pagination (1-based) */
    page?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Get Exchange Rankings Recap
   * @description Gets daily recap for the exchange rankings page
   */
  getExchangeRankingsRecap: {
    parameters: {
      query?: {
        /** @description Optional time period for the recap */
        period?: components["schemas"]["RecapSlug"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExchangeRankingsRecap"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Exchange Recap
   * @description Gets news and performance recap for a given exchange
   */
  getExchangeRecap: {
    parameters: {
      query: {
        /** @description Exchange identifier */
        exchange_id: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExchangeRecap"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Exchange not found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Recap
   * @description Gets a recap of the latest news and intel for a given set of assets
   */
  getProjectRecap: {
    parameters: {
      query: {
        /** @description Project identifier */
        project_id: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["GetProjectRecapResponse"];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Project not found */
      404: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Chat Completion
   * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
   * The last message must be from the user role.
   */
  createChatCompletion: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ChatCompletionResponse"];
            metadata?: components["schemas"]["ChatCompletionResponseMetadata"];
          };
          "text/event-stream": string;
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Entity Extraction
   * @description Extracts entities from the provided text content using AI models and database lookups.
   * Supports various entity types and can return similar entities based on the extracted names.
   */
  extractEntities: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtractRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExtractResponse"];
            metadata?: components["schemas"]["ExtractResponseMetadata"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Asset List
   * @description Get a paginated list of assets.
   * Each filter allows multiple values, comma-separated.
   * All assets that match any of the values for a given filter will be returned,
   * as long as they are not filtered out by other filters.
   */
  getAssetList: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset symbols (comma-separated). It might return multiple assets for a given symbol. */
        symbol?: string;
        /** @description Filter by asset names (comma-separated). It might return multiple assets for a given name. */
        name?: string;
        /** @description Filter by asset categories (comma-separated) */
        category?: string;
        /** @description Filter by asset sectors (comma-separated) */
        sector?: string;
        /** @description Filter by asset tags (comma-separated) */
        tags?: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["BasicAsset"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Diligence Report
   * @description Gets a specific diligence report by asset ID. Requires authentication and appropriate enterprise access.
   */
  getReportByAssetID: {
    parameters: {
      path: {
        /** @description UUID of the asset to get the report for */
        assetId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved diligence report */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReport"];
        };
      };
      400: components["responses"]["ErrorResponse"];
      403: components["responses"]["ErrorResponse"];
      404: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Get Diligence Previews
   * @description Gets a preview of the available diligence reports
   */
  getPreviews: {
    parameters: {
      query?: {
        /** @description Filter reports by sector */
        sector?: string;
        /** @description Filter reports by default inclusion status */
        isDefaultIncluded?: boolean;
        /** @description Filter reports by published status */
        isPublished?: boolean;
        /** @description Filter reports by purchase status */
        isPurchased?: boolean;
        /** @description Sort field (updated_at or created_at) */
        sort?: "updated_at" | "created_at";
        /** @description Sort order (asc or desc) */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successfully retrieved report previews */
      200: {
        content: {
          "application/json": components["schemas"]["GetPreviewsResponse"];
        };
      };
      400: components["responses"]["ErrorResponse"];
      500: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Get Acquisition Deals
   * @description Lookup M&A Deals given a set of filters
   */
  getAcquisitionDeals: {
    parameters: {
      query?: {
        /** @description Comma-separated list of acquiring entity (projects, organizations) uuids */
        acquiringEntityId?: string;
        /** @description Comma-separated list of acquired entity (projects, organizations) uuids */
        acquiredEntityId?: string;
        /** @description Filter by minimum transaction amount in USD */
        transactionAmountMin?: number;
        /** @description Filter by maximum transaction amount in USD */
        transactionAmountMax?: number;
        /** @description Filter by deals announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by deals announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["AcquisitionDeal"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Organizations
   * @description Lookup Organizations given a set of filters
   */
  getOrganizations: {
    parameters: {
      query?: {
        /** @description Comma-separated list of organization uuids to filter by */
        id?: string;
        /** @description Comma-separated list of categories to filter by */
        category?: string;
        /** @description Comma-separated list of sectors to filter by */
        sector?: string;
        /** @description Comma-separated list of tags to filter by */
        tags?: string;
        /** @description Filter by organizations founded before the specified date */
        foundedBefore?: string;
        /** @description Filter by organizations founded after the specified date */
        foundedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Organization"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Projects
   * @description Lookup Projects given a set of filters
   */
  getProjects: {
    parameters: {
      query?: {
        /** @description Comma-separated list of project uuids to filter by */
        id?: string;
        /** @description Comma-separated list of categories to filter by */
        category?: string;
        /** @description Comma-separated list of sectors to filter by */
        sector?: string;
        /** @description Comma-separated list of tags to filter by */
        tags?: string;
        /** @description Filter by projects founded before the specified date */
        foundedBefore?: string;
        /** @description Filter by projects founded after the specified date */
        foundedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Project"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Fundraising Rounds
   * @description Gets a list of all fundraising rounds
   */
  getFundingRounds: {
    parameters: {
      query?: {
        /** @description Comma-separated list of projects or organizations uuids which received funding */
        fundedEntityId?: string;
        /** @description Comma-separated list of investor (persons, projects, orgs) IDs who invested in the funding rounds */
        investorId?: string;
        /** @description Comma-separated list of funding round types to filter by */
        type?: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
        /** @description Comma-separated list of funding round stages to filter by */
        stage?: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
        /** @description Filter by maximum amount raised in USD */
        raisedAmountMax?: number;
        /** @description Filter by minimum amount raised in USD */
        raisedAmountMin?: number;
        /** @description Filter by rounds that were funded with tokens */
        isTokenFunded?: boolean;
        /** @description Filter by rounds announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by rounds announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["FundingRound"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Fundraising Rounds Investors
   * @description Gets a list of all investors for a given fundraising round
   */
  getFundingRoundsInvestors: {
    parameters: {
      query?: {
        /** @description Comma-separated list of projects or organizations uuids which received funding */
        fundedEntityId?: string;
        /** @description Comma-separated list of investor (persons, projects, orgs) IDs who invested in the funding rounds */
        investorId?: string;
        /** @description Comma-separated list of funding round types to filter by */
        type?: "Accelerator" | "Debt Financing" | "Extended Pre Seed" | "Extended Seed" | "Extended Series A" | "Extended Series B" | "Extended Series C" | "Extended Series D" | "Grant" | "ICO" | "IPO" | "Post IPO" | "Post IPO Debt" | "Pre Seed" | "Pre Series A" | "Pre Series B" | "Private Token Sale" | "Public Token Sale" | "Seed" | "Series A" | "Series B" | "Series C" | "Series D" | "Series E" | "Series F" | "Series G" | "Series H" | "Strategic" | "Treasury Diversification" | "Undisclosed";
        /** @description Comma-separated list of funding round stages to filter by */
        stage?: "Seed" | "Early Stage" | "Late Stage" | "Public Equity Offering" | "Post Public Equity" | "Miscellaneous";
        /** @description Filter by maximum amount raised in USD */
        raisedAmountMax?: number;
        /** @description Filter by minimum amount raised in USD */
        raisedAmountMin?: number;
        /** @description Filter by rounds that were funded with tokens */
        isTokenFunded?: boolean;
        /** @description Filter by rounds announced before the specified date */
        announcedBefore?: string;
        /** @description Filter by rounds announced after the specified date */
        announcedAfter?: string;
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Investors"][];
          };
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get all assets
   * @description Returns a list of assets.
   * Supports pagination and filtering by name or symbol.
   */
  getAllAssets: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset symbols (comma-separated) */
        symbol?: string;
        /** @description Filter by asset names (comma-separated) */
        name?: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Asset"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get all events
   * @description Returns a list of events based on the provided filters.
   * Supports pagination and filtering by various parameters.
   */
  getAllEvents: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetAllEventsRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Event"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get event and its history
   * @description Returns a specific event by ID along with its history.
   */
  getEventAndHistory: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
      path: {
        /** @description ID of the event to retrieve */
        eventId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["GetEventResponse"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Asset ATH
   * @description Returns a single asset's ATH data
   */
  getAssetATH: {
    parameters: {
      path: {
        /** @description Asset ID */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AssetWithATHData"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Asset Market Data
   * @description Returns a single asset's market data
   */
  getAssetMarketdata: {
    parameters: {
      path: {
        /** @description Asset ID */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AssetMarketData"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * ROI by Asset
   * @description Returns a single asset's ROI data
   */
  getAssetROI: {
    parameters: {
      path: {
        /** @description Asset ID */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AssetWithROIData"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * ATHs
   * @description Returns a list of all time high data for all assets
   */
  getAssetsATH: {
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AssetWithATHData"][];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * ROIs
   * @description Returns a list ROI data for all assets
   */
  getAssetsROI: {
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AssetWithROIData"][];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get assets mentioned in news
   * @description Returns a list of assets that are mentioned in news articles.
   * Supports pagination and filtering by asset name or symbol.
   */
  getNewsFeedAssets: {
    parameters: {
      query?: {
        /** @description A case-sensitive text to search by asset name, i.e. Bitcoin, or priority symbol, i.e. BTC */
        nameOrSymbol?: string;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["AssetList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get news feed
   * @description Returns a list of news articles.
   * Supports pagination and filtering by various parameters.
   */
  getNewsFeed: {
    parameters: {
      query?: {
        /** @description Timestamp in milliseconds UTC. If publishedBefore is provided, publishedAfter must be greater. */
        publishedBefore?: number;
        /** @description Timestamp in milliseconds UTC. */
        publishedAfter?: number;
        /** @description List of source types to filter by. If provided, the results will be filtered by these source types. */
        sourceTypes?: ("Blog" | "Forum" | "News")[];
        /** @description List of source IDs to filter by. If provided, the results will be filtered by these source IDs. */
        sourceIds?: string[];
        /** @description List of asset IDs to filter by. If provided, the results will be filtered by these asset IDs. */
        assetIds?: string[];
        /** @description Sort by publish time in ascending or descending order. 2 (DESC) by default. */
        sort?: 1 | 2;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["DocumentList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get news sources
   * @description Returns a list of news sources.
   * Supports pagination and filtering by source name.
   */
  getNewsSources: {
    parameters: {
      query?: {
        /** @description A case-sensitive text to search by source name, i.e. CoinDesk */
        sourceName?: string;
        /** @description Number of results per page */
        limit?: number;
        /** @description Page number */
        page?: number;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["SourceList"];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get Research Reports
   * @description Get a paginated list of research reports.
   */
  getResearchReports: {
    parameters: {
      query: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset ID. */
        assetId?: string;
        /** @description Filter by asset tags (comma-separated) */
        tags?: string;
        /** @description Filter by content type. */
        contentType: "html" | "markdown";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["ResearchReport"][];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Research Report by ID
   * @description Get a research report by its ID.
   */
  getResearchReportById: {
    parameters: {
      path: {
        /** @description ID of the research report */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["ResearchReport"];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get Research Report Tags
   * @description Get a list of all tags associated with research reports.
   */
  getResearchReportTags: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data: string[];
          };
        };
      };
      /** @description Client error response */
      400: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock allocations
   * @description Returns allocation information given a set of asset IDs
   */
  getTokenUnlockAllocations: {
    parameters: {
      query?: {
        /** @description Filter by asset IDs (comma-separated) */
        assetIDs?: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock allocations */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockAllocation"][];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock supported assets
   * @description Get all token unlock supported assets
   */
  getTokenUnlockSupportedAssets: {
    parameters: {
      query?: {
        /** @description Filter by asset IDs (comma-separated) */
        assetIDs?: string;
        /** @description Filter by asset category (comma-separated) */
        category?: string;
        /** @description Filter by asset sectors (comma-separated) */
        sectors?: string;
        /** @description Filter by asset tags (comma-separated) */
        tags?: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock supported assets */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockSupportedAsset"][];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock events
   * @description Returns unlock events for a given asset ID
   */
  getTokenUnlockEvents: {
    parameters: {
      query?: {
        /** @description RFC3339 formatted time from which to start fetching unlock events data. */
        startTime?: string;
        /** @description RFC3339 formatted time where to end fetching unlock events data. */
        endTime?: string;
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock events */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockEvent"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock unlocks
   * @description Returns interval-based unlock timeseries data for a given asset and interval
   */
  getTokenUnlocks: {
    parameters: {
      query: {
        /** @description RFC3339 formatted time from which to start fetching vesting schedule data. */
        startTime: string;
        /** @description RFC3339 formatted time where to end fetching vesting schedule data. */
        endTime: string;
        /** @description Time intervals that that the data is aggregated over. Available values: DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY. */
        interval: "DAILY" | "WEEKLY" | "MONTHLY" | "QUARTERLY" | "YEARLY";
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock unlocks */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockUnlocks"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
  /**
   * Get token unlock vesting schedule
   * @description Returns vesting schedule timeseries data for a given asset
   */
  getTokenUnlockVestingSchedule: {
    parameters: {
      query: {
        /** @description RFC3339 formatted time from which to start fetching vesting schedule data. */
        startTime: string;
        /** @description RFC3339 formatted time where to end fetching vesting schedule data. */
        endTime: string;
      };
      path: {
        /** @description The ID of the asset */
        assetId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description A list of token unlock vesting schedule timeseries data */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponse"] & {
            data?: components["schemas"]["TokenUnlockVestingSchedule"];
          };
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
    };
  };
};
