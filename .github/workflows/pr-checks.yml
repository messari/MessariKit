name: PR Checks

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  # Runs linter, tsc type-check, api type generation + validation, pkg build, and tests
  build-checks:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: latest
        run_install: false
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Lint code
      run: pnpm lint:fix
    
    - name: API validation and generation
      run: pnpm api:build
    
    - name: Build all packages
      run: pnpm build

    - name: Check TypeScript
      run: pnpm -r exec tsc --noEmit
    
    - name: Run tests
      run: pnpm test

  dependency-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: latest
        run_install: false
    
    - name: Check for dependency issues
      run: pnpm install --frozen-lockfile
      